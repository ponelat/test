---
swagger: "2.0"
info:
  description: "The registry API for SwaggerHub"
  version: "1.0.97"
  title: "SwaggerHub Registry API"
  contact:
    name: "SwaggerHub"
    url: "http://swaggerhub.com"
    email: "info@swaggerhub.com"
host: "dev-api.swaggerhub.com"
tags:
- name: "APIs"
- name: "Domains"
- name: "Plugins"
- name: "Support"
- name: "Custom Rules"
- name: "Search V2"
- name: "Integrations"
schemes:
- "https"
produces:
- "application/json"
paths:
  /apis/{owner}/{api}/{version}/push:
    put:
      tags:
      - "APIs"
      - "SourceControl"
      summary: "Push resources based on API defintion version out to source control\
        \ based on configured integrations"
      operationId: "pushToSourceControl"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "commitMessage"
        in: "query"
        description: "Message to create commit with. A default will be provided if\
          \ no message is provided."
        required: false
        type: "string"
        x-exportParamName: "CommitMessage"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Push was succesful"
          schema:
            $ref: "#/definitions/inline_response_200"
        "204":
          description: "No push took place. Integration specified either not relevant\
            \ for SCM functionality or not enabled."
        "400":
          description: "The push action may fail due to:\n- Authentication failure\
            \ when performing repository actions. This is likely due to access tokens\
            \ without the relevant scopes or permissions.\n- The repository not being\
            \ initialised. It's required that a repository must have at least 1 file\
            \ committed to the remote origin.\n"
        "401":
          description: "Access token is not set or invalid"
        "403":
          description: "Access denied. User doesn't have relevant permissions required\
            \ to perfrom this action."
        "404":
          description: "Definition not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.SourceControlController"
  /apis/{owner}/{api}/{version}/push/{integrationId}:
    put:
      tags:
      - "APIs"
      - "SourceControl"
      summary: "Push resources based on API defintion version out to source control\
        \ based on configured integration"
      operationId: "pushToSourceControlWithIntegrationId"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "integrationId"
        in: "path"
        description: "integration identifier"
        required: true
        type: "string"
        x-exportParamName: "IntegrationId"
      - name: "commitMessage"
        in: "query"
        description: "Message to create commit with. A default will be provided if\
          \ no message is provided."
        required: false
        type: "string"
        x-exportParamName: "CommitMessage"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Push was succesful"
        "204":
          description: "No push took place. Integration specified either not relevant\
            \ for SCM functionality or not enabled."
        "400":
          description: "The push action may fail due to:\n- Authentication failure\
            \ when performing repository actions. This is likely due to access tokens\
            \ without the relevant scopes or permissions.\n- The repository not being\
            \ initialised. It's required that a repository must have at least 1 file\
            \ committed to the remote origin.\n"
        "401":
          description: "Access token is not set or invalid"
        "403":
          description: "Access denied. User doesn't have relevant permissions required\
            \ to perfrom this action."
        "404":
          description: "Definition not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.SourceControlController"
  /apis/{owner}/{api}/{version}/pull/{integrationId}:
    get:
      tags:
      - "APIs"
      - "SourceControl"
      summary: "Pull resource from source control based on configured integration"
      operationId: "pullFromSourceControl"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "integrationId"
        in: "path"
        description: "integration identifier"
        required: true
        type: "string"
        x-exportParamName: "IntegrationId"
      responses:
        "200":
          description: "Pull was succesful. Pulled definition is returned."
          schema:
            type: "object"
            example: "swagger: '2.0' info:\n  description: The API pulled from SCM\n\
              \  version: \"1.0.0\"\n  title: API in SCM\n"
        "204":
          description: "No pull took place"
        "400":
          description: "The pull action may fail due to:\n- Invalid configuration.\
            \ The integration is not set up correctly to enable pulling from SCM.\n\
            \  The integration must sync Unresolved Yaml/JSON.\n\n- Authentication\
            \ failure when performing repository actions. This is likely due to access\
            \ tokens without the relevant scopes or permissions.\n- The file not existing\
            \ in the remote origin.\n"
        "401":
          description: "Access token is not set or invalid"
        "403":
          description: "The pull feature is not available for the organization's plan,\
            \ or the authenticating user does not have permission to complete this\
            \ action.\n"
        "404":
          description: "Definition not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.SourceControlController"
  /apis/{owner}/{api}/{version}/settings/github:
    get:
      tags:
      - "APIs"
      summary: "Retrieves export settings for the specified API"
      description: ""
      operationId: "getGitHubExportSettings"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "export settings for this API"
          schema:
            $ref: "#/definitions/GitHubExportSettings"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    put:
      tags:
      - "APIs"
      summary: "Updates export settings for the specified API"
      description: ""
      operationId: "setGitHubExportSettings"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "settings"
        description: "Export settings"
        required: true
        schema:
          $ref: "#/definitions/GitHubExportSettings"
        x-exportParamName: "Settings"
      responses:
        "200":
          description: "export settings were successfully stored"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/settings/lifecycle:
    get:
      tags:
      - "APIs"
      summary: "Retrieves lifecycle settings for the specified API"
      description: ""
      operationId: "getLifecycleSettings"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "lifecycle settings for the specified API"
          schema:
            $ref: "#/definitions/LifecycleSettings"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    put:
      tags:
      - "APIs"
      summary: "Updates lifecycle settings for the specified API"
      description: ""
      operationId: "setLifecycleSettings"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "settings"
        description: "lifecycle settings"
        required: true
        schema:
          $ref: "#/definitions/LifecycleSettings"
        x-exportParamName: "Settings"
      - name: "force"
        in: "query"
        description: "force update"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "lifecycle settings were successfully stored"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/settings/private:
    get:
      tags:
      - "APIs"
      summary: "Retrieve visibility settings for the specified API."
      description: ""
      operationId: "getPrivateSettings"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "Visibility settings for the specified API."
          schema:
            $ref: "#/definitions/VisibilitySettings"
        "404":
          description: "The specified API was not found."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    put:
      tags:
      - "APIs"
      summary: "Update visibility settings for the specified API."
      description: ""
      operationId: "setPrivateSettings"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "settings"
        description: "private settings"
        required: true
        schema:
          $ref: "#/definitions/VisibilitySettings"
        x-exportParamName: "Settings"
      responses:
        "200":
          description: "Visibility setting was updated."
        "403":
          description: "Access denied."
        "404":
          description: "The specified API was not found."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/private/count:
    get:
      tags:
      - "APIs"
      summary: "Returns the number of private APIs for the user"
      description: ""
      operationId: "getPrivateAPIsCount"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      responses:
        "200":
          description: "number private APIs for the specified user"
          schema:
            type: "integer"
            format: "int32"
        "403":
          description: "access denied"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/.meta:
    get:
      tags:
      - "APIs"
      summary: "Retrieves metadata for the specified API"
      description: ""
      operationId: "getApiMetadata"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      responses:
        "200":
          description: "metadata for this API"
          schema:
            $ref: "#/definitions/ApiMetadata"
        "404":
          description: "no metadata was found"
      security:
      - TokenSecured: []
      - {}
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    put:
      tags:
      - "APIs"
      summary: "Updates metadata for the specified API"
      description: ""
      operationId: "setApiMetadata"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - in: "body"
        name: "metadata"
        description: "metadata for this API"
        required: true
        schema:
          $ref: "#/definitions/ApiMetadata"
        x-exportParamName: "Metadata"
      responses:
        "200":
          description: "the metadata was successfully saved"
        "403":
          description: "access denied"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis:
    get:
      tags:
      - "APIs"
      summary: "Retrieves a list of currently defined APIs in APIs.json format."
      description: ""
      operationId: "searchApis"
      parameters:
      - name: "filter"
        in: "query"
        description: "filter to apply, 'user' filters by current user"
        required: false
        type: "string"
        enum:
        - "user"
        x-inflector-hidden: true
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "free text query to match"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "state"
        in: "query"
        description: "matches against published state of the spec\n* UNPUBLISHED -\
          \ spec is a draft, a work in progress\n* PUBLISHED - spec is a stable version\
          \ ready for consuming from client applications\n* ANY - either PUBLISHED\
          \ or UNPUBLISHED\n"
        required: false
        type: "string"
        default: "ALL"
        enum:
        - "ALL"
        - "PUBLISHED"
        - "UNPUBLISHED"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "matches against tags associated with an API"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Tag"
      - name: "page"
        in: "query"
        description: "page to return"
        required: false
        type: "integer"
        default: 0
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "number of results per page (1 .. 100)"
        required: false
        type: "integer"
        default: 10
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "sort criteria or result set\n* NAME -\n* UPATED\n* CREATED\n\
          * OWNER\n* BEST_MATCH\n* TITLE\n"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "UPDATED"
        - "CREATED"
        - "OWNER"
        - "BEST_MATCH"
        - "TITLE"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "order"
        in: "query"
        description: "sort order"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
        x-exportParamName: "Order"
        x-optionalDataType: "String"
      responses:
        "303":
          description: "303 response"
          headers:
            Location:
              type: "string"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}:
    get:
      tags:
      - "APIs"
      summary: "Retrieves an APIs.json listing of all APIs defined for this owner"
      description: ""
      operationId: "getOwnerApis"
      parameters:
      - name: "filter"
        in: "query"
        description: "filter to apply, 'user' filters by current user"
        required: false
        type: "string"
        enum:
        - "user"
        x-inflector-hidden: true
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "page"
        in: "query"
        description: "page to return"
        required: false
        type: "integer"
        default: 0
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "number of results per page (1 .. 100)"
        required: false
        type: "integer"
        default: 10
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "sort criteria or result set\n* NAME -\n* UPATED\n* CREATED\n\
          * OWNER\n* BEST_MATCH\n* TITLE\n"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "UPDATED"
        - "CREATED"
        - "OWNER"
        - "BEST_MATCH"
        - "TITLE"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "order"
        in: "query"
        description: "sort order"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
        x-exportParamName: "Order"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "a list of APIs in APIs.json format"
          schema:
            $ref: "#/definitions/ApisJson"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    put:
      tags:
      - "APIs"
      summary: "Updates owner"
      operationId: "updateOwner"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "newNameToken"
        in: "query"
        description: "Token for updating owner name"
        required: true
        type: "string"
        x-exportParamName: "NewNameToken"
      responses:
        "200":
          description: "Owner was updated"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    delete:
      tags:
      - "APIs"
      summary: "Deletes all APIs"
      description: ""
      operationId: "deleteAll"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      responses:
        "200":
          description: "APIs were successfully deleted"
        "403":
          description: "access denied"
        "404":
          description: "specified owner not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}:
    get:
      tags:
      - "APIs"
      summary: "Retrieves an APIs.json listing for all API versions for this owner\
        \ and API"
      operationId: "getApiVersions"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      responses:
        "200":
          description: "a list of API versions in APIs.json format"
          schema:
            $ref: "#/definitions/ApisJson"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    post:
      tags:
      - "APIs"
      summary: "Create or update an API."
      description: "Saves the provided Swagger definition; the owner must match the\
        \ token owner. The version will be extracted from the Swagger definitions\
        \ itself."
      operationId: "saveDefinition"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "isPrivate"
        in: "query"
        description: "Defines whether the API has to be private"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IsPrivate"
        x-optionalDataType: "Bool"
      - name: "version"
        in: "query"
        description: "API version to create or update. If omitted, the version will\
          \ be taken from the `info.version` field in the definition."
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - in: "body"
        name: "definition"
        description: "the Swagger definition of this API"
        required: true
        schema:
          type: "string"
        x-exportParamName: "Definition"
      - name: "force"
        in: "query"
        description: "force update"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "projectName"
        in: "query"
        description: "The project to add the API or Domain to.\n"
        required: false
        type: "string"
        x-exportParamName: "ProjectName"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "the API was successfully saved"
        "201":
          description: "new API was successfully saved"
        "205":
          description: "the API was successfully saved and should be reloaded"
        "400":
          description: "the Swagger definition was invalid"
        "403":
          description: "maximum number of APIs reached"
        "409":
          description: "can not overwrite a published API version"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    delete:
      tags:
      - "APIs"
      summary: "Deletes the specified API"
      description: ""
      operationId: "deleteApi"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      responses:
        "200":
          description: "the API was successfully deleted"
        "403":
          description: "access denied"
        "404":
          description: "specified API not found"
        "409":
          description: "the API has published versions and can not be deleted"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/.template:
    get:
      tags:
      - "APIs"
      summary: "Retrieves list of apis templates"
      operationId: "getApiTemplates"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "template catalog"
          schema:
            $ref: "#/definitions/TemplateCatalog"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/.template:
    post:
      tags:
      - "APIs"
      summary: "Creates API by template"
      description: ""
      operationId: "saveApiDefinitionByTemplate"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "isPrivate"
        in: "query"
        description: "Defines whether the API has to be private"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IsPrivate"
        x-optionalDataType: "Bool"
      - name: "template"
        in: "query"
        description: "Template id"
        required: true
        type: "string"
        x-exportParamName: "Template"
      - name: "projectName"
        in: "query"
        description: "The project to add the API or Domain to.\n"
        required: false
        type: "string"
        x-exportParamName: "ProjectName"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "API was successfully saved"
        "201":
          description: "new API was successfully saved"
        "205":
          description: "the API was successfully saved and should be reloaded"
        "403":
          description: "maximum number of APIs reached"
        "409":
          description: "can not overwrite a published API version"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/rename:
    post:
      tags:
      - "APIs"
      summary: "Rename API."
      operationId: "renameApi"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "newName"
        in: "query"
        description: "New name"
        required: true
        type: "string"
        maxLength: 60
        minLength: 3
        x-exportParamName: "NewName"
      responses:
        "200":
          description: "API was successfully renamed."
        "403":
          description: "Access denied."
        "409":
          description: "API or domain with the new name already exists."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/.collaboration:
    get:
      tags:
      - "APIs"
      summary: "Gets API's collaboration"
      operationId: "getCollaboration"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "expandTeams"
        in: "query"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ExpandTeams"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "the existing collaboration on an API"
          schema:
            $ref: "#/definitions/Collaboration"
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    put:
      tags:
      - "APIs"
      summary: "Updates API's collaboration"
      operationId: "updateCollaboration"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Collaboration"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successfully updated API collaboration"
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    delete:
      tags:
      - "APIs"
      summary: "Deletes API's collaboration"
      operationId: "deleteCollaboration"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      responses:
        default:
          description: "successfully deleted a collaboration"
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/.transfer:
    post:
      tags:
      - "APIs"
      summary: "transfers api to another owner"
      description: ""
      operationId: "transferApi"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "newOwner"
        in: "query"
        description: "New owner"
        required: true
        type: "string"
        x-exportParamName: "NewOwner"
      - name: "projectName"
        in: "query"
        description: "The project to add the API or Domain to.\n"
        required: false
        type: "string"
        x-exportParamName: "ProjectName"
        x-optionalDataType: "String"
      - name: "transferIntegrations"
        in: "query"
        description: "Transfer integrations"
        required: false
        type: "boolean"
        x-exportParamName: "TransferIntegrations"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "the Swagger API was transfered"
          schema:
            type: "object"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}:
    get:
      tags:
      - "APIs"
      summary: "Retrieves the Swagger definition for the specified API and version"
      description: ""
      operationId: "getDefinition"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "resolved"
        in: "query"
        description: "If true, return resolved version of Swagger definition."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Resolved"
        x-optionalDataType: "Bool"
      - name: "flatten"
        in: "query"
        description: "If true, creates models from inline schemas in Swagger definition."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Flatten"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "the Swagger API in requested format"
          schema:
            type: "object"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    delete:
      tags:
      - "APIs"
      summary: "Deletes a particular version of the specified API"
      description: ""
      operationId: "deleteApiVersion"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "the API version was successfully deleted"
        "403":
          description: "access denied"
        "404":
          description: "specified API not found"
        "409":
          description: "the API version is published and can not be deleted or it\
            \ is the only version of this API"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/fork:
    post:
      tags:
      - "APIs"
      summary: "Fork an API."
      description: "Create a fork of the API definition."
      operationId: "forkApi"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "forkVersion"
        description: "Fork version information"
        required: true
        schema:
          $ref: "#/definitions/ForkVersion"
        x-exportParamName: "ForkVersion"
      responses:
        "201":
          description: "API was successfully forked."
        "403":
          description: "Access denied."
        "409":
          description: "Conflict with existing existing definition."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/.fork:
    post:
      tags:
      - "APIs"
      summary: "Forks the provided Swagger definition"
      description: "Forks the provided Swagger definition."
      operationId: "forkApiV1"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "isPrivate"
        in: "query"
        description: "Defines whether the API has to be private"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IsPrivate"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "newSpec"
        description: "New spec id"
        required: true
        schema:
          $ref: "#/definitions/SpecId"
        x-exportParamName: "NewSpec"
      - name: "force"
        in: "query"
        description: "force update"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "the API was successfully forked"
        "403":
          description: "maximum number of APIs reached"
        "409":
          description: "can not overwrite existing API"
      security:
      - TokenSecured: []
      deprecated: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/clone:
    post:
      tags:
      - "APIs"
      summary: "Add new API version."
      description: "Clone an existing API version as a new version."
      operationId: "cloneApi"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "newVersion"
        description: "New API version settings"
        required: true
        schema:
          $ref: "#/definitions/NewVersion"
        x-exportParamName: "NewVersion"
      responses:
        "201":
          description: "API version was successfully created"
        "400":
          description: "Invalid request"
        "403":
          description: "Access denied"
        "404":
          description: "Specified API not found"
        "409":
          description: "API version already exists"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/compare:
    post:
      tags:
      - "APIs"
      summary: "Compares two APIs"
      description: "Compares two APIs"
      operationId: "compareApisFromFile"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "method"
        in: "query"
        description: "The method to use for comparing two APIs.\n* FULL - Full line-by-line\
          \ text comparison of the two APIs\n* LOGICAL - Compares if the two API's\
          \ are logically equivalent. Ignores non-structural fields like descriptions,\
          \ examples etc. Also ignores order when not important.\n* STRUCTURAL - Like\
          \ LOGICAL but also compares non-structural fields\n"
        required: true
        type: "string"
        enum:
        - "FULL"
        - "LOGICAL"
        - "STRUCTURAL"
        x-exportParamName: "Method"
      - in: "body"
        name: "definition"
        description: "the definition parsed from an uploaded file."
        required: true
        schema:
          type: "string"
        x-exportParamName: "Definition"
      responses:
        "200":
          description: "the two APIs were successfully compared"
          schema:
            $ref: "#/definitions/Comparison"
        "403":
          description: "access denied"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/swagger.json:
    get:
      tags:
      - "APIs"
      summary: "Retrieves the Swagger definition for the specified API and version\
        \ in JSON format"
      description: ""
      operationId: "getJsonDefinition"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "pretty"
        in: "query"
        description: "Pretty format the JSON"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Pretty"
        x-optionalDataType: "Bool"
      - name: "resolved"
        in: "query"
        description: "If true, return resolved version of Swagger definition."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Resolved"
        x-optionalDataType: "Bool"
      - name: "flatten"
        in: "query"
        description: "If true, creates models from inline schemas in Swagger definition."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Flatten"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "the Swagger API in JSON format"
          schema:
            type: "object"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/swagger.yaml:
    get:
      tags:
      - "APIs"
      summary: "Retrieves the Swagger definition for the specified API and version\
        \ in YAML format"
      description: ""
      operationId: "getYamlDefinition"
      produces:
      - "application/yaml"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "resolved"
        in: "query"
        description: "If true, return resolved version of Swagger definition."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Resolved"
        x-optionalDataType: "Bool"
      - name: "flatten"
        in: "query"
        description: "If true, creates models from inline schemas in Swagger definition."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Flatten"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "the Swagger API in YAML format"
          schema:
            type: "object"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/.codegen/{generatorType}/lang:
    get:
      tags:
      - "APIs"
      summary: "Retrieves codegen languages options for the specified API"
      description: ""
      operationId: "getCodegenLanguagesOptions"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "generatorType"
        in: "path"
        description: "type of generator"
        required: true
        type: "string"
        enum:
        - "server"
        - "client"
        - "documentation"
        - "other"
        x-exportParamName: "GeneratorType"
      responses:
        "200":
          description: "codegen languages options for the specified API"
          schema:
            type: "object"
            additionalProperties:
              $ref: "#/definitions/CodegenLanguage"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/.codegen/{generatorType}/lang/{language}:
    get:
      tags:
      - "APIs"
      summary: "Retrieves codegen language options for the specified API"
      description: ""
      operationId: "getCodegenLanguageOptions"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "generatorType"
        in: "path"
        description: "type of generator"
        required: true
        type: "string"
        enum:
        - "server"
        - "client"
        - "documentation"
        - "other"
        x-exportParamName: "GeneratorType"
      - name: "language"
        in: "path"
        description: "language name"
        required: true
        type: "string"
        x-exportParamName: "Language"
      responses:
        "200":
          description: "codegen language options for the specified API"
          schema:
            $ref: "#/definitions/CodegenLanguage"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    post:
      tags:
      - "APIs"
      summary: "Saves codegen language options for the specified API"
      description: ""
      operationId: "setCodegenLanguageOptions"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "generatorType"
        in: "path"
        description: "type of generator"
        required: true
        type: "string"
        enum:
        - "server"
        - "client"
        - "documentation"
        - "other"
        x-exportParamName: "GeneratorType"
      - name: "language"
        in: "path"
        description: "language name"
        required: true
        type: "string"
        x-exportParamName: "Language"
      - in: "body"
        name: "language options"
        description: "language options"
        required: true
        schema:
          $ref: "#/definitions/CodegenLanguage"
        x-exportParamName: "LanguageOptions"
      responses:
        "200":
          description: "codegen language options was succesfully saved"
        "403":
          description: "access denied"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    delete:
      tags:
      - "APIs"
      summary: "Delete codegen language options for the specified API"
      description: ""
      operationId: "deleteCodegenLanguageOptions"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "generatorType"
        in: "path"
        description: "type of generator"
        required: true
        type: "string"
        enum:
        - "server"
        - "client"
        - "documentation"
        - "other"
        x-exportParamName: "GeneratorType"
      - name: "language"
        in: "path"
        description: "language name"
        required: true
        type: "string"
        x-exportParamName: "Language"
      responses:
        "200":
          description: "codegen language options was succesfully deleted"
        "403":
          description: "access denied"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/comments:
    get:
      tags:
      - "APIs"
      summary: "Returns the list of comments for the specified API"
      operationId: "getApiCommentsV2"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "comments for the specified API"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ClosableComment"
        "204":
          description: "no comments were found for the specified API"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified api not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    post:
      tags:
      - "APIs"
      summary: "Adds a new comment to the specified API"
      operationId: "addApiComment"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NewComment"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "newly created comment for the specified API"
          schema:
            $ref: "#/definitions/ClosableComment"
        "400":
          description: "the request body was invalid"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified api not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/comments/batch:
    post:
      tags:
      - "APIs"
      summary: "Updates passed batch of comments"
      operationId: "updateApiComments"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CommentsBatch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "comments were updated"
        "400":
          description: "the request body was invalid"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified api or comment or reply not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/comments/{comment}:
    delete:
      tags:
      - "APIs"
      summary: "Deletes specified comment"
      operationId: "deleteApiComment"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "comment"
        in: "path"
        description: "comment identifier"
        required: true
        type: "string"
        x-exportParamName: "Comment"
      responses:
        "200":
          description: "comment was deleted"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified api or comment not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    patch:
      tags:
      - "APIs"
      summary: "Updates specified comment"
      operationId: "updateApiComment"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "comment"
        in: "path"
        description: "comment identifier"
        required: true
        type: "string"
        x-exportParamName: "Comment"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ClosableCommentPatch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "comment was updated"
          schema:
            $ref: "#/definitions/ClosableComment"
        "400":
          description: "the request body was invalid"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified api or comment not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/comments/{comment}/status/{status}:
    put:
      tags:
      - "APIs"
      summary: "Updates status to the specified comment"
      operationId: "setApiCommentStatus"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "comment"
        in: "path"
        description: "comment identifier"
        required: true
        type: "string"
        x-exportParamName: "Comment"
      - name: "status"
        in: "path"
        description: "comment status"
        required: true
        type: "string"
        enum:
        - "OPEN"
        - "RESOLVED"
        x-exportParamName: "Status"
      responses:
        "200":
          description: "comment status was updated"
        "400":
          description: "the request body was invalid"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified api or comment not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/comments/{comment}/replies:
    post:
      tags:
      - "APIs"
      summary: "Adds a new reply to the specified comment"
      operationId: "addApiCommentReply"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "comment"
        in: "path"
        description: "comment identifier"
        required: true
        type: "string"
        x-exportParamName: "Comment"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NewReply"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "newly created reply"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
        "400":
          description: "the request body was invalid"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified api or comment not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/comments/{comment}/replies/{reply}:
    delete:
      tags:
      - "APIs"
      summary: "Deletes specified comment reply"
      operationId: "deleteApiCommentReply"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "comment"
        in: "path"
        description: "comment identifier"
        required: true
        type: "string"
        x-exportParamName: "Comment"
      - name: "reply"
        in: "path"
        description: "reply identifier"
        required: true
        type: "string"
        x-exportParamName: "Reply"
      responses:
        "200":
          description: "comment reply was deleted"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified api or comment or reply not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    patch:
      tags:
      - "APIs"
      summary: "Updates specified comment reply"
      operationId: "updateApiCommentReply"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "comment"
        in: "path"
        description: "comment identifier"
        required: true
        type: "string"
        x-exportParamName: "Comment"
      - name: "reply"
        in: "path"
        description: "reply identifier"
        required: true
        type: "string"
        x-exportParamName: "Reply"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CommentPatch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "comment reply was updated"
          schema:
            $ref: "#/definitions/Comment"
        "400":
          description: "the request body was invalid"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified api or comment or reply not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/.comment:
    get:
      tags:
      - "APIs"
      summary: "Returns the list of comments for the specified API"
      operationId: "getApiComments"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "comments for the specified API"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ClosableComment"
        "204":
          description: "no comments were found for the specified API"
        "401":
          description: "access token is not set or invalid"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      deprecated: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/{version}/.draft:
    get:
      tags:
      - "Drafts"
      summary: "Retrieves the draft definition and associated comments for the specified\
        \ API and version"
      description: ""
      operationId: "getDraft"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "the draft definition and associated comments"
          schema:
            $ref: "#/definitions/DraftModel"
        "404":
          description: "specified draft not found"
      security:
      - TokenSecured: []
      - {}
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    put:
      tags:
      - "Drafts"
      summary: "Saves the provided draft for a Swagger definition and associated comments"
      description: "Saves the provided draft for a swagger definition and associated\
        \ comments."
      operationId: "saveDraft"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "entity"
        description: "the Swagger definition of this API and comments in draft state"
        required: true
        schema:
          $ref: "#/definitions/DraftModel"
        x-exportParamName: "Entity"
      responses:
        "200":
          description: "the draft was successfully saved"
        "201":
          description: "new draft was successfully saved"
        "205":
          description: "the draft was successfully saved and should be reloaded"
        "400":
          description: "the Swagger definition was invalid"
        "403":
          description: "maximum number of drafts reached"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    delete:
      tags:
      - "Drafts"
      summary: "Deletes a particular version of the specified API"
      description: ""
      operationId: "deleteDraftApi"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "the draft was successfully deleted"
        "403":
          description: "access denied"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/.notifications:
    get:
      tags:
      - "APIs"
      summary: "Gets notification status for spec."
      operationId: "getApiNotifications"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "scope"
        in: "query"
        description: "Identifies requester"
        required: true
        type: "string"
        default: "USER"
        enum:
        - "USER"
        - "ALL"
        x-exportParamName: "Scope"
      - name: "version"
        in: "query"
        description: "version of the spec"
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - name: "filterViewers"
        in: "query"
        description: "Role as a criteria for filter list of notifiable users."
        required: false
        type: "boolean"
        x-exportParamName: "FilterViewers"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Separate lists of users with enabled and disabled notifications."
          schema:
            $ref: "#/definitions/NotificationPreferences"
        "403":
          description: "Access denied."
        "404":
          description: "Specified API not found."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    put:
      tags:
      - "APIs"
      summary: "Change notification status for spec"
      operationId: "setApiNotifications"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      responses:
        "201":
          description: "Notification status for given api is updated."
        "403":
          description: "Access denied."
        "404":
          description: "Specified API not found."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    delete:
      tags:
      - "APIs"
      summary: "Disable notification status for spec for the user making the request"
      operationId: "disableApiNotifications"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      responses:
        "201":
          description: "Notification status for given api is updated."
        "403":
          description: "Access denied."
        "404":
          description: "Specified API not found."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /apis/{owner}/{api}/settings/default:
    get:
      tags:
      - "APIs"
      summary: "Retrieves default version for the specified API"
      description: ""
      operationId: "getApiDefaultVersion"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      responses:
        "200":
          description: "default version for this API"
          schema:
            $ref: "#/definitions/DefaultVersion"
        "404":
          description: "no default version was found"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
    put:
      tags:
      - "APIs"
      summary: "Updates default version for the specified API"
      description: ""
      operationId: "setApiDefaultVersion"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - in: "body"
        name: "metadata"
        description: "default version for this API"
        required: true
        schema:
          $ref: "#/definitions/DefaultVersion"
        x-exportParamName: "Metadata"
      responses:
        "200":
          description: "the default version was successfully saved"
        "403":
          description: "access denied"
        "404":
          description: "specified API not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /domains:
    get:
      tags:
      - "Domains"
      summary: "Retrieves a list of currently defined domains in APIs.json format"
      operationId: "searchDomains"
      parameters:
      - name: "filter"
        in: "query"
        description: "filter to apply, 'user' filters by current user"
        required: false
        type: "string"
        enum:
        - "user"
        x-inflector-hidden: true
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "free text query to match"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "state"
        in: "query"
        description: "matches against published state of the spec\n* UNPUBLISHED -\
          \ spec is a draft, a work in progress\n* PUBLISHED - spec is a stable version\
          \ ready for consuming from client applications\n* ANY - either PUBLISHED\
          \ or UNPUBLISHED\n"
        required: false
        type: "string"
        default: "ALL"
        enum:
        - "ALL"
        - "PUBLISHED"
        - "UNPUBLISHED"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "matches against tags associated with a domain"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Tag"
      - name: "page"
        in: "query"
        description: "page to return"
        required: false
        type: "integer"
        default: 0
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "number of results per page (1 .. 100)"
        required: false
        type: "integer"
        default: 10
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "sort criteria or result set\n* NAME -\n* UPATED\n* CREATED\n\
          * OWNER\n* BEST_MATCH\n* TITLE\n"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "UPDATED"
        - "CREATED"
        - "OWNER"
        - "BEST_MATCH"
        - "TITLE"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "order"
        in: "query"
        description: "sort order"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
        x-exportParamName: "Order"
        x-optionalDataType: "String"
      responses:
        "303":
          description: "303 response"
          headers:
            Location:
              type: "string"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}:
    get:
      tags:
      - "Domains"
      summary: "Retrieves an APIs.json listing of all domains defined for this owner"
      operationId: "getOwnerDomains"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "page"
        in: "query"
        description: "page to return"
        required: false
        type: "integer"
        default: 0
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "number of results per page (1 .. 100)"
        required: false
        type: "integer"
        default: 10
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "sort criteria or result set\n* NAME -\n* UPATED\n* CREATED\n\
          * OWNER\n* BEST_MATCH\n* TITLE\n"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "UPDATED"
        - "CREATED"
        - "OWNER"
        - "BEST_MATCH"
        - "TITLE"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "order"
        in: "query"
        description: "sort order"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
        x-exportParamName: "Order"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "a list of domains in APIs.json format"
          schema:
            $ref: "#/definitions/ApisJson"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/.refs:
    get:
      tags:
      - "Domains"
      summary: "Retrieves an APIs.json listing of entries referencing owner domains"
      operationId: "getOwnerReferences"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      responses:
        "200":
          description: "a list of APIs and domains in APIs.json format"
          schema:
            $ref: "#/definitions/ApisJson"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/.suggest/{type}:
    get:
      tags:
      - "Domains"
      summary: "Suggests domain entites of the specified type by their name"
      operationId: "suggestDomainEntity"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "type"
        in: "path"
        description: "entity type"
        required: true
        type: "string"
        enum:
        - "pathitems"
        - "pathItems"
        - "definitions"
        - "parameters"
        - "responses"
        - "schemas"
        - "examples"
        - "requestbodies"
        - "requestBodies"
        - "headers"
        - "links"
        - "callbacks"
        x-exportParamName: "Type_"
      - name: "query"
        in: "query"
        description: "query string"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "oas"
        in: "query"
        description: "The OpenApi Specification (oas) version.\n* 2.0 - Formally known\
          \ as 'swagger'\n* 3.0.x - The latest supported OpenApi Specification version\
          \ by SwaggerHub.\nFor search queries all 3.0.x versions are grouped together\n"
        required: false
        type: "string"
        enum:
        - "2.0"
        - "3.0.0"
        - "3.0.1"
        - "3.0.2"
        - "3.0.3"
        x-exportParamName: "Oas"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "a list of domains in APIs.json format. Each entry will be\
            \ listed with the 'X-Suggestion' property  which value will contain comma\
            \ separated list of available definitions matching the query"
          schema:
            $ref: "#/definitions/ApisJson"
        "404":
          description: "specified owner not found"
      security:
      - TokenSecured: []
      - {}
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/.suggest/{type}:
    get:
      tags:
      - "Domains"
      summary: "Suggests all domain entites of the specified type. This endpoint returns\
        \ any entities that the user has access (either as an API owner, Org Member\
        \ or Collaborator)."
      operationId: "getUserDomains"
      parameters:
      - name: "type"
        in: "path"
        description: "entity type"
        required: true
        type: "string"
        enum:
        - "pathitems"
        - "pathItems"
        - "definitions"
        - "parameters"
        - "responses"
        - "schemas"
        - "examples"
        - "requestbodies"
        - "requestBodies"
        - "headers"
        - "links"
        - "callbacks"
        x-exportParamName: "Type_"
      - name: "query"
        in: "query"
        description: "query string"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "oas"
        in: "query"
        description: "The OpenApi Specification (oas) version.\n* 2.0 - Formally known\
          \ as 'swagger'\n* 3.0.x - The latest supported OpenApi Specification version\
          \ by SwaggerHub.\nFor search queries all 3.0.x versions are grouped together\n"
        required: false
        type: "string"
        enum:
        - "2.0"
        - "3.0.0"
        - "3.0.1"
        - "3.0.2"
        - "3.0.3"
        x-exportParamName: "Oas"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "a list of domains in APIs.json format. Each entry will be\
            \ listed with the 'X-Suggestion' property  which value will contain comma\
            \ separated list of available definitions matching the query"
          schema:
            $ref: "#/definitions/ApisJson"
      security:
      - TokenSecured: []
      - {}
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}:
    get:
      tags:
      - "Domains"
      summary: "Retrieves an APIs.json listing for all domain versions for this owner\
        \ and domain"
      operationId: "getDomainVersions"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      responses:
        "200":
          description: "a list of domain versions in APIs.json format"
          schema:
            $ref: "#/definitions/ApisJson"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    post:
      tags:
      - "Domains"
      summary: "Create or update a domain."
      operationId: "saveDomainDefinition"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "isPrivate"
        in: "query"
        description: "Defines whether the API has to be private"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IsPrivate"
        x-optionalDataType: "Bool"
      - name: "version"
        in: "query"
        description: "Domain version to create or update. If omitted, the version\
          \ will be taken from the `info.version` field in the definition."
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - in: "body"
        name: "definition"
        description: "the Swagger definition of this Domain"
        required: false
        schema:
          type: "string"
        x-exportParamName: "Definition"
        x-optionalDataType: "String"
      - name: "force"
        in: "query"
        description: "force update"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "projectName"
        in: "query"
        description: "The project to add the API or Domain to.\n"
        required: false
        type: "string"
        x-exportParamName: "ProjectName"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "the domain was successfully saved"
        "201":
          description: "new domain was successfully saved"
        "205":
          description: "the domain was successfully saved and should be reloaded"
        "403":
          description: "maximum number of domains reached"
        "409":
          description: "can not overwrite a published domain version"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    delete:
      tags:
      - "Domains"
      summary: "Deletes the specified domain"
      operationId: "deleteDomain"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "force"
        in: "query"
        description: "force update"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "the domain was successfully deleted"
        "403":
          description: "access denied"
        "404":
          description: "specified domain not found"
        "409":
          description: "the domain has published versions and can not be deleted"
        "424":
          description: "Can not delete because there are dependencies on this domain."
          schema:
            $ref: "#/definitions/Page"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/.notifications:
    get:
      tags:
      - "Domains"
      summary: "Gets notification status for spec."
      operationId: "getDomainNotifications"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "scope"
        in: "query"
        description: "Identifies requester"
        required: true
        type: "string"
        default: "USER"
        enum:
        - "USER"
        - "ALL"
        x-exportParamName: "Scope"
      - name: "version"
        in: "query"
        description: "version of the spec"
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - name: "filterViewers"
        in: "query"
        description: "Role as a criteria for filter list of notifiable users."
        required: false
        type: "boolean"
        x-exportParamName: "FilterViewers"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Separate lists of users with enabled and disabled notifications"
          schema:
            $ref: "#/definitions/NotificationPreferences"
        "403":
          description: "Access denied."
        "404":
          description: "Specified domain not found."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    put:
      tags:
      - "Domains"
      summary: "Change notification status for spec for the user making the request"
      operationId: "setDomainNotifications"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      responses:
        "201":
          description: "Setup notification status for given domain."
        "403":
          description: "Access denied."
        "404":
          description: "Specified API not found."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    delete:
      tags:
      - "Domains"
      summary: "Disable notification status for spec"
      operationId: "disableDomainNotifications"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      responses:
        "201":
          description: "Setup notification status for given domain."
        "403":
          description: "Access denied."
        "404":
          description: "Specified API not found."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/rename:
    post:
      tags:
      - "Domains"
      summary: "Rename domain."
      operationId: "renameDomain"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "newName"
        in: "query"
        description: "New name"
        required: true
        type: "string"
        maxLength: 60
        minLength: 3
        x-exportParamName: "NewName"
      - name: "force"
        in: "query"
        description: "force update"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Domain was successfully renamed."
        "403":
          description: "Access denied."
        "409":
          description: "API or Domain with the new name already exists."
        "424":
          description: "Can not rename because there are dependencies on this domain.\
            \ Use the `force` parameter to override this."
          schema:
            $ref: "#/definitions/Page"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/.transfer:
    post:
      tags:
      - "Domains"
      summary: "transfers domain to another owner"
      description: ""
      operationId: "transferDomain"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "newOwner"
        in: "query"
        description: "New owner"
        required: true
        type: "string"
        x-exportParamName: "NewOwner"
      - name: "force"
        in: "query"
        description: "force update"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "projectName"
        in: "query"
        description: "The project to add the API or Domain to.\n"
        required: false
        type: "string"
        x-exportParamName: "ProjectName"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "the Swagger Domain was transfered"
          schema:
            type: "object"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}:
    get:
      tags:
      - "Domains"
      summary: "Retrieves the Swagger definition for the specified domain and version"
      operationId: "getDomainDefinition"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "the Swagger domain in requested format"
          schema:
            type: "object"
        "404":
          description: "specified domain not found"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    delete:
      tags:
      - "Domains"
      summary: "Deletes a particular version of the specified domain"
      operationId: "deleteDomainVersion"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "force"
        in: "query"
        description: "force update"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "the domain version was successfully deleted"
        "403":
          description: "access denied"
        "404":
          description: "specified domain not found"
        "409":
          description: "the domain version is published and can not be deleted or\
            \ it is the only version of this API"
        "424":
          description: "Can not delete because there are dependencies on this domain."
          schema:
            $ref: "#/definitions/Page"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/fork:
    post:
      tags:
      - "Domains"
      summary: "Fork a domain."
      description: "Create a fork of the domain definition."
      operationId: "forkDomain"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "forkVersion"
        description: "Fork version information."
        required: true
        schema:
          $ref: "#/definitions/ForkVersion"
        x-exportParamName: "ForkVersion"
      responses:
        "201":
          description: "Domain was successfully forked."
        "403":
          description: "Access denied."
        "409":
          description: "Conflict with existing existing definition."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/.fork:
    post:
      tags:
      - "Domains"
      summary: "Forks the provided domain definition."
      description: "Forks the provided domain definition."
      operationId: "forkDomainV1"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "isPrivate"
        in: "query"
        description: "Defines whether the API has to be private"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IsPrivate"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "newSpec"
        description: "New spec id"
        required: true
        schema:
          $ref: "#/definitions/SpecId"
        x-exportParamName: "NewSpec"
      - name: "force"
        in: "query"
        description: "force update"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "the domain was successfully forked"
        "403":
          description: "maximum number of domains reached"
        "409":
          description: "can not overwrite existing domain"
      security:
      - TokenSecured: []
      deprecated: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/clone:
    post:
      tags:
      - "Domains"
      summary: "Add new domain version."
      description: "Clone an existing domain version as a new version."
      operationId: "cloneDomain"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "newVersion"
        description: "New domain version settings"
        required: true
        schema:
          $ref: "#/definitions/NewVersion"
        x-exportParamName: "NewVersion"
      responses:
        "201":
          description: "Domain version was successfully created"
        "400":
          description: "Invalid request"
        "403":
          description: "Access denied"
        "404":
          description: "Specified domain not found"
        "409":
          description: "Domain version already exists"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/domain.json:
    get:
      tags:
      - "Domains"
      summary: "Retrieves the definition for the specified domain and version in JSON\
        \ format"
      operationId: "getDomainJsonDefinition"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "pretty"
        in: "query"
        description: "Pretty format the JSON"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Pretty"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "definition in JSON format"
          schema:
            type: "object"
        "404":
          description: "specified domain not found"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/domain.yaml:
    get:
      tags:
      - "Domains"
      summary: "Retrieves the definition for the specified domain and version in YAML\
        \ format"
      operationId: "getDomainYamlDefinition"
      produces:
      - "application/yaml"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "definition in YAML format"
          schema:
            type: "object"
        "404":
          description: "specified domain not found"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/settings/github:
    get:
      tags:
      - "Domains"
      summary: "Retrieves export settings for the specified domain"
      description: ""
      operationId: "getDomainExportSettings"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "export settings for this domain"
          schema:
            $ref: "#/definitions/GitHubExportSettings"
        "404":
          description: "specified domain not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    put:
      tags:
      - "Domains"
      summary: "Updates export settings for the specified domain"
      description: ""
      operationId: "setDomainExportSettings"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "settings"
        description: "Export settings"
        required: true
        schema:
          $ref: "#/definitions/GitHubExportSettings"
        x-exportParamName: "Settings"
      responses:
        "200":
          description: "export settings were successfully stored"
        "404":
          description: "specified domain not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/settings/lifecycle:
    get:
      tags:
      - "Domains"
      summary: "Retrieves lifecycle settings for the specified domain"
      description: ""
      operationId: "getDomainLifecycleSettings"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "lifecycle settings for the specified domain"
          schema:
            $ref: "#/definitions/LifecycleSettings"
        "404":
          description: "specified domain not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    put:
      tags:
      - "Domains"
      summary: "Updates lifecycle settings for the specified domain"
      description: ""
      operationId: "setDomainLifecycleSettings"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "settings"
        description: "lifecycle settings"
        required: true
        schema:
          $ref: "#/definitions/LifecycleSettings"
        x-exportParamName: "Settings"
      - name: "force"
        in: "query"
        description: "force update"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "lifecycle settings were successfully stored"
        "404":
          description: "specified domain not found"
        "424":
          description: "Can not update because there are dependencies on this domain."
          schema:
            $ref: "#/definitions/Page"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/settings/private:
    get:
      tags:
      - "Domains"
      summary: "Retrieves visibility settings for the specified domain."
      description: ""
      operationId: "getDomainPrivateSettings"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "private settings for the specified domain"
          schema:
            $ref: "#/definitions/VisibilitySettings"
        "404":
          description: "The specified domain was not found."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    put:
      tags:
      - "Domains"
      summary: "Update visibilty settings for the specified domain."
      description: ""
      operationId: "setDomainPrivateSettings"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "settings"
        description: "private settings"
        required: true
        schema:
          $ref: "#/definitions/VisibilitySettings"
        x-exportParamName: "Settings"
      - name: "force"
        in: "query"
        description: "force update"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Visibility settings were updated."
        "403":
          description: "Access denied."
        "404":
          description: "The specified domain was not found."
        "424":
          description: "Could not update because there are dependencies on this domain."
          schema:
            $ref: "#/definitions/Page"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/.meta:
    get:
      tags:
      - "Domains"
      summary: "Retrieves metadata for the specified domain"
      description: ""
      operationId: "getDomainMetadata"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      responses:
        "200":
          description: "metadata for this domain"
          schema:
            $ref: "#/definitions/ApiMetadata"
        "404":
          description: "no metadata was found"
      security:
      - TokenSecured: []
      - {}
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    put:
      tags:
      - "Domains"
      summary: "Updates metadata for the specified domain"
      description: ""
      operationId: "setDomainMetadata"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - in: "body"
        name: "metadata"
        description: "metadata for this domain"
        required: true
        schema:
          $ref: "#/definitions/ApiMetadata"
        x-exportParamName: "Metadata"
      responses:
        "200":
          description: "the metadata was successfully saved"
        "403":
          description: "access denied"
        "404":
          description: "specified domain not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/comments:
    get:
      tags:
      - "Domains"
      summary: "Returns the list of comments for the specified domain"
      operationId: "getDomainCommentsV2"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "comments for the specified domain"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ClosableComment"
        "204":
          description: "no comments were found for the specified domain"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified domain not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    post:
      tags:
      - "Domains"
      summary: "Adds a new comment to the specified domain"
      operationId: "addDomainComment"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NewComment"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "newly created comment for the specified domain"
          schema:
            $ref: "#/definitions/ClosableComment"
        "400":
          description: "the request body was invalid"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified domain not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/comments/batch:
    post:
      tags:
      - "Domains"
      summary: "Updates passed batch of comments"
      operationId: "updateDomainComments"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CommentsBatch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "comments were updated"
        "400":
          description: "the request body was invalid"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified domain or comment or reply not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/comments/{comment}:
    delete:
      tags:
      - "Domains"
      summary: "Deletes specified comment"
      operationId: "deleteDomainComment"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "comment"
        in: "path"
        description: "comment identifier"
        required: true
        type: "string"
        x-exportParamName: "Comment"
      responses:
        "200":
          description: "comment was deleted"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified domain or comment not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    patch:
      tags:
      - "Domains"
      summary: "Updates specified comment"
      operationId: "updateDomainComment"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "comment"
        in: "path"
        description: "comment identifier"
        required: true
        type: "string"
        x-exportParamName: "Comment"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ClosableCommentPatch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "comment was updated"
          schema:
            $ref: "#/definitions/ClosableComment"
        "400":
          description: "the request body was invalid"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified domain or comment not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/comments/{comment}/status/{status}:
    put:
      tags:
      - "Domains"
      summary: "Updates status to the specified comment"
      operationId: "setDomainCommentStatus"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "comment"
        in: "path"
        description: "comment identifier"
        required: true
        type: "string"
        x-exportParamName: "Comment"
      - name: "status"
        in: "path"
        description: "comment status"
        required: true
        type: "string"
        enum:
        - "OPEN"
        - "RESOLVED"
        x-exportParamName: "Status"
      responses:
        "200":
          description: "comment status was updated"
        "400":
          description: "the request body was invalid"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified domain or comment not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/comments/{comment}/replies:
    post:
      tags:
      - "Domains"
      summary: "Adds a new reply to the specified comment"
      operationId: "addDomainCommentReply"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "comment"
        in: "path"
        description: "comment identifier"
        required: true
        type: "string"
        x-exportParamName: "Comment"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NewReply"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "newly created reply"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
        "400":
          description: "the request body was invalid"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified domain or comment not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/comments/{comment}/replies/{reply}:
    delete:
      tags:
      - "Domains"
      summary: "Deletes specified comment reply"
      operationId: "deleteDomainCommentReply"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "comment"
        in: "path"
        description: "comment identifier"
        required: true
        type: "string"
        x-exportParamName: "Comment"
      - name: "reply"
        in: "path"
        description: "reply identifier"
        required: true
        type: "string"
        x-exportParamName: "Reply"
      responses:
        "200":
          description: "comment reply was deleted"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified domain or comment or reply not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    patch:
      tags:
      - "Domains"
      summary: "Updates specified comment reply"
      operationId: "updateDomainCommentReply"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "comment"
        in: "path"
        description: "comment identifier"
        required: true
        type: "string"
        x-exportParamName: "Comment"
      - name: "reply"
        in: "path"
        description: "reply identifier"
        required: true
        type: "string"
        x-exportParamName: "Reply"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CommentPatch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "comment reply was updated"
          schema:
            $ref: "#/definitions/Comment"
        "400":
          description: "the request body was invalid"
        "401":
          description: "access token is not set or invalid"
        "403":
          description: "The comment feature is not available for the organization's\
            \ plan, or the authenticating user does not have permission to complete\
            \ this action."
        "404":
          description: "specified domain or comment or reply not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/.comment:
    get:
      tags:
      - "Domains"
      summary: "Returns the list of comments for the specified domain"
      operationId: "getDomainComments"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "comments for the specified domain"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ClosableComment"
        "204":
          description: "no comments were found for the specified domain"
        "401":
          description: "access token is not set or invalid"
        "404":
          description: "specified domain not found"
      security:
      - TokenSecured: []
      deprecated: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/{version}/.draft:
    get:
      tags:
      - "Drafts"
      summary: "Retrieves the draft and associated comments for the specified domain"
      description: ""
      operationId: "getDraftDomain"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "the draft and associated comments for a domain definition"
          schema:
            $ref: "#/definitions/DraftModel"
        "404":
          description: "specified draft not found"
      security:
      - TokenSecured: []
      - {}
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    put:
      tags:
      - "Drafts"
      summary: "Saves the provided draft and associated comments for a domain."
      description: "Saves the provided draft and associated comments for a domain\
        \ definition."
      operationId: "saveDraftDomain"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "entity"
        description: "the Swagger definition of this API and comments in draft state"
        required: true
        schema:
          $ref: "#/definitions/DraftModel"
        x-exportParamName: "Entity"
      responses:
        "200":
          description: "the draft was successfully saved"
        "201":
          description: "new draft was successfully saved"
        "205":
          description: "the draft was successfully saved"
        "400":
          description: "the domain definition was invalid"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    delete:
      tags:
      - "Drafts"
      summary: "Deletes a particular version of the specified Domain"
      description: ""
      operationId: "deleteDraftDomain"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "the draft was successfully deleted"
        "403":
          description: "access denied"
        "404":
          description: "Draft domain not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /domains/{owner}/{domain}/settings/default:
    get:
      tags:
      - "Domains"
      summary: "Retrieves default version for the specified domain"
      description: ""
      operationId: "getDomainDefaultVersion"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      responses:
        "200":
          description: "default version for this domain"
          schema:
            $ref: "#/definitions/DefaultVersion"
        "404":
          description: "no default version was found"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
    put:
      tags:
      - "Domains"
      summary: "Updates default version for the specified domain"
      description: ""
      operationId: "setDomainDefaultVersion"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "domain"
        in: "path"
        description: "domain identifier"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - in: "body"
        name: "metadata"
        description: "default version for this domain"
        required: true
        schema:
          $ref: "#/definitions/DefaultVersion"
        x-exportParamName: "Metadata"
      responses:
        "200":
          description: "the default version was successfully saved"
        "403":
          description: "access denied"
        "404":
          description: "specified domain not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.DomainsV1Service"
  /notifications:
    delete:
      tags:
      - "Notifications"
      summary: "Disable all current notification for the user on the specified medium"
      operationId: "disableNotifications"
      parameters: []
      responses:
        "200":
          description: "Notifications succesfully disabled"
        "403":
          description: "Access denied."
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /plugins:
    get:
      tags:
      - "Plugins"
      summary: "Retrieves a list of all available plugins (ignore system plugins)"
      description: ""
      operationId: "getAvailablePlugins"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Owner"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "a list of plugins in json format"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PluginDefinition"
        "403":
          description: "access denied"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
    post:
      tags:
      - "Plugins"
      summary: "Register a plugin"
      description: ""
      operationId: "registerPlugin"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters:
      - in: "body"
        name: "pluginDefinition"
        description: "the Plugin definition to be registered or disabled"
        required: true
        schema:
          $ref: "#/definitions/PluginDefinition"
        x-exportParamName: "PluginDefinition"
      responses:
        "200":
          description: "the Plugin was successfully registered"
        "400":
          description: "the Plugin definition was invalid"
        "403":
          description: "access denied"
        "409":
          description: "cannot add plugin with same class and version of existing"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
  /plugins/{pluginId}:
    delete:
      tags:
      - "Plugins"
      summary: "Disables a plugin"
      description: ""
      operationId: "disablePlugin"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "pluginId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PluginId"
      responses:
        "200":
          description: "the Plugin was successfully disabled"
        "403":
          description: "access denied"
        "404":
          description: "the Plugin definition was not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
  /plugins/configurations:
    get:
      tags:
      - "Plugins"
      summary: "Retrieves a list of enabled plugin configurations"
      description: "Retrieves a list of enabled plugin configurations"
      operationId: "getPlugins"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "query"
        description: "plugin configuration objectId"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "page"
        in: "query"
        description: "page to return"
        required: false
        type: "integer"
        default: 0
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "number of results per page (1 .. 100)"
        required: false
        type: "integer"
        default: 10
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "a list of plugin configurations in json format"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PluginConfiguration"
        "403":
          description: "access denied"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
    post:
      tags:
      - "Plugins"
      summary: "Saves the provided Plugin configuration"
      description: "Saves the provided Plugin configuration"
      operationId: "addPluginConfiguration"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters:
      - in: "body"
        name: "pluginConfiguration"
        description: "the Plugin configuration to be added or updated"
        required: true
        schema:
          $ref: "#/definitions/PluginConfiguration"
        x-exportParamName: "PluginConfiguration"
      - name: "trigger"
        in: "query"
        description: "if true, also execute plugin"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Trigger"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "the Plugin configuration was successfully saved"
        "400":
          description: "the Plugin configuration was invalid"
        "403":
          description: "access denied"
        "409":
          description: "cannot add plugin configuration with same id"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
    put:
      tags:
      - "Plugins"
      summary: "Updated the provided Plugin configuration"
      description: "Updated the provided Plugin configuration"
      operationId: "updatePluginConfiguration"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters:
      - in: "body"
        name: "pluginConfiguration"
        description: "the Plugin configuration to be added or updated"
        required: true
        schema:
          $ref: "#/definitions/PluginConfiguration"
        x-exportParamName: "PluginConfiguration"
      - name: "trigger"
        in: "query"
        description: "if true, also execute plugin"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Trigger"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "the Plugin configuration was successfully updated"
        "400":
          description: "the Plugin configuration was invalid"
        "403":
          description: "access denied"
        "404":
          description: "the Plugin configuration was not found"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
  /plugins/configurations/{pluginId}:
    delete:
      tags:
      - "Plugins"
      summary: "Deletes the provided Plugin configuration"
      description: "Deletes the provided Plugin configuration"
      operationId: "removePluginConfiguration"
      parameters:
      - name: "pluginId"
        in: "path"
        description: "Id of plugin configuration to delete"
        required: true
        type: "string"
        x-exportParamName: "PluginId"
      responses:
        "200":
          description: "the Plugin configuration was successfully deleted"
        "403":
          description: "access denied"
        "404":
          description: "the Plugin configuration was not found"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
  /plugins/configurations/{owner}/options:
    put:
      tags:
      - "Plugins"
      - "System"
      summary: "For a given Owner, make changes to configurations based on the options\
        \ given"
      description: "Using this endpoint allows the user to make mass updates to a\
        \ given owners plugin configurations"
      operationId: "acceptConfigurationOptions"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - in: "body"
        name: "configurationOptions"
        description: "Using this endpoint allows the user to make mass updates to\
          \ a given owners plugin configurations"
        required: false
        schema:
          $ref: "#/definitions/PluginConfigurationUpdateOptions"
        x-exportParamName: "ConfigurationOptions"
      responses:
        "200":
          description: "Options were accepted and update(s) were made succefully"
        "403":
          description: "User is forbidden from accessing this operation"
        "404":
          description: "Not found"
        "500":
          description: "Unexpected Error"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
  /plugins/configurations/{owner}/{api}/{version}/{integrationPluginType}:
    put:
      tags:
      - "Plugins"
      summary: "Creates or updates a plugin configuration tailored to defined integrationPluginType"
      description: "Creates or updates a plugin configuration tailored to defined\
        \ integrationPluginType"
      operationId: "saveIntegrationPluginOfType"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "integrationPluginType"
        in: "path"
        description: "What type of plugin to be created for the API"
        required: true
        type: "string"
        enum:
        - "GITHUB"
        - "BITBUCKET"
        - "AZURE_DEVOPS_SERVICES"
        - "AZURE_DEVOPS_SERVER"
        - "GITLAB"
        x-exportParamName: "IntegrationPluginType"
      - name: "oas"
        in: "query"
        description: "The OpenApi Specification (oas) version.\n* 2.0 - Formally known\
          \ as 'swagger'\n* 3.0.x - The latest supported OpenApi Specification version\
          \ by SwaggerHub.\nFor search queries all 3.0.x versions are grouped together\n"
        required: false
        type: "string"
        enum:
        - "2.0"
        - "3.0.0"
        - "3.0.1"
        - "3.0.2"
        - "3.0.3"
        x-exportParamName: "Oas"
        x-optionalDataType: "String"
      - in: "body"
        name: "integrationPluginTypeConfiguration"
        required: true
        schema:
          $ref: "#/definitions/IntegrationPluginConfiguration"
        x-exportParamName: "IntegrationPluginTypeConfiguration"
      responses:
        "200":
          description: "the Plugin configuration was successfully created"
        "400":
          description: "the Plugin configuration was invalid"
        "403":
          description: "access denied"
        "404":
          description: "owner, api, version combination not found"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      deprecated: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
  /plugins/configurations/{owner}/{api}/{version}/copy:
    post:
      tags:
      - "Plugins"
      summary: "Options for configurations for a given owner, api, version"
      description: ""
      operationId: "copyConfigurations"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "configurationIds"
        required: false
        schema:
          $ref: "#/definitions/CopyConfigurationDetails"
        x-exportParamName: "ConfigurationIds"
      responses:
        "200":
          description: "the Plugin configuration draft successfully saved"
        "400":
          description: "the request body was invalid"
        "403":
          description: "access denied"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
  /plugins/configurations/draft:
    post:
      tags:
      - "Plugins"
      summary: "Saves the provided Plugin configuration draft"
      description: "Saves the provided Plugin configuration draft"
      operationId: "addPluginConfigurationDraft"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters:
      - in: "body"
        name: "pluginConfiguration"
        description: "the Plugin configuration to be added or updated"
        required: true
        schema:
          $ref: "#/definitions/PluginConfiguration"
        x-exportParamName: "PluginConfiguration"
      responses:
        "200":
          description: "the Plugin configuration draft successfully saved"
          schema:
            $ref: "#/definitions/PluginConfiguration"
        "400":
          description: "the Plugin configuration was invalid"
        "403":
          description: "access denied"
        "409":
          description: "cannot add plugin configuration with same id"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
  /plugins/configurations/schema:
    post:
      tags:
      - "Plugins"
      summary: "get configuration schema for the provided Plugin configuration"
      description: "Get configuration schema for the provided Plugin configuration"
      operationId: "buildConfigurationSchema"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters:
      - in: "body"
        name: "pluginConfiguration"
        description: "the Plugin configuration to be added or updated"
        required: true
        schema:
          $ref: "#/definitions/PluginConfiguration"
        x-exportParamName: "PluginConfiguration"
      responses:
        "200":
          description: "the configuration schema in json format"
          schema:
            type: "object"
        "400":
          description: "the Plugin configuration was invalid"
        "403":
          description: "access denied"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
  /plugins/configurations/item/{id}:
    get:
      tags:
      - "Plugins"
      summary: "returns plugin configuration identified by id"
      description: "returns plugin configuration identified by id"
      operationId: "loadPluginConfiguration"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "plugin configuration id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "the Plugin configuration identified by id"
          schema:
            $ref: "#/definitions/PluginConfiguration"
        "403":
          description: "access denied"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
  /plugins/configurations/execute/{id}:
    post:
      tags:
      - "Plugins"
      summary: "triggers execution of plugin configuration identified by id"
      description: "triggers execution of plugin configuration identified by id"
      operationId: "triggerPluginConfiguration"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "plugin configuration id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "successful execution"
        "403":
          description: "access denied"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
  /plugins/configurations/oauth/{userUuid}/{username}/{pluginConfigId}/{oauthProviderId}:
    get:
      tags:
      - "Plugins"
      summary: "oauth callback url for plugins"
      description: "oauth callback url for plugins"
      operationId: "oauthCallback"
      parameters:
      - name: "userUuid"
        in: "path"
        description: "user uuid originally issueing the request"
        required: true
        type: "string"
        x-exportParamName: "UserUuid"
      - name: "username"
        in: "path"
        description: "user originally issueing the request"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "pluginConfigId"
        in: "path"
        description: "plugin configuration temporary id"
        required: true
        type: "string"
        x-exportParamName: "PluginConfigId"
      - name: "oauthProviderId"
        in: "path"
        description: "oAuth provider id (e.g. github)"
        required: true
        type: "string"
        x-exportParamName: "OauthProviderId"
      - name: "code"
        in: "query"
        description: "oAuth callback code param"
        required: false
        type: "string"
        x-exportParamName: "Code"
        x-optionalDataType: "String"
      - name: "state"
        in: "query"
        description: "oAuth callback state param"
        required: false
        type: "string"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      responses:
        "302":
          description: "302 response"
          headers:
            Location:
              type: "string"
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
  /plugins/configurations/oauth:
    get:
      tags:
      - "Plugins"
      summary: "oauth callback url for plugins with query params"
      description: "oauth callback url for plugins with query params"
      operationId: "oauthCallbackWithQueryParams"
      parameters:
      - name: "userUuid"
        in: "query"
        description: "user uuid originally issueing the request"
        required: true
        type: "string"
        x-exportParamName: "UserUuid"
      - name: "username"
        in: "query"
        description: "user originally issuing the request"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "pluginConfigId"
        in: "query"
        description: "plugin configuration temporary id"
        required: true
        type: "string"
        x-exportParamName: "PluginConfigId"
      - name: "oauthProviderId"
        in: "query"
        description: "oAuth provider id (e.g. github)"
        required: true
        type: "string"
        x-exportParamName: "OauthProviderId"
      - name: "code"
        in: "query"
        description: "oAuth callback code param"
        required: false
        type: "string"
        x-exportParamName: "Code"
        x-optionalDataType: "String"
      - name: "state"
        in: "query"
        description: "oAuth callback state param"
        required: false
        type: "string"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      responses:
        "302":
          description: "302 response"
          headers:
            Location:
              type: "string"
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
  /plugins/configurations/oauthWithState:
    get:
      tags:
      - "Plugins"
      summary: "oauth callback url for plugins with a state query parameter"
      description: "oauth callback url for plugins with a state query parameter"
      operationId: "oauthCallbackWithStateOnly"
      parameters:
      - name: "code"
        in: "query"
        description: "oAuth callback code param"
        required: false
        type: "string"
        pattern: "[^|]+(\\|[^|]+){4}"
        x-exportParamName: "Code"
        x-optionalDataType: "String"
      - name: "state"
        in: "query"
        description: "oAuth callback state parameter in the following form `state|userId|userName|pluginConfigurationId|oauthProviderId`"
        required: false
        type: "string"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      responses:
        "302":
          description: "302 response"
          headers:
            Location:
              type: "string"
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
  /plugins/systemconfigurations:
    get:
      tags:
      - "Plugins"
      summary: "Gets system configurations"
      operationId: "getSystemPluginConfigurations"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters: []
      responses:
        "200":
          description: "System Plugin configuration was successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SystemPluginConfiguration"
        "403":
          description: "access denied"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
    post:
      tags:
      - "Plugins"
      summary: "Saves the provided System Plugin configuration"
      description: "Saves the provided System Plugin configuration"
      operationId: "addSystemPluginConfiguration"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters:
      - in: "body"
        name: "systemPluginConfiguration"
        description: "the System Plugin configuration to be added or updated"
        required: true
        schema:
          $ref: "#/definitions/SystemPluginConfiguration"
        x-exportParamName: "SystemPluginConfiguration"
      responses:
        "200":
          description: "the System Plugin configuration was successfully saved"
        "400":
          description: "the System Plugin configuration was invalid"
        "403":
          description: "access denied"
        "409":
          description: "cannot add System Plugin configuration with same id"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
    put:
      tags:
      - "Plugins"
      summary: "Updates the provided System Plugin configuration"
      description: "Updated the provided System Plugin configuration"
      operationId: "updateSystemPluginConfiguration"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters:
      - in: "body"
        name: "systemPluginConfiguration"
        description: "the System Plugin configuration to be added or updated"
        required: true
        schema:
          $ref: "#/definitions/SystemPluginConfiguration"
        x-exportParamName: "SystemPluginConfiguration"
      responses:
        "200":
          description: "the System Plugin configuration was successfully updated"
        "400":
          description: "the System Plugin configuration was invalid"
        "403":
          description: "access denied"
        "404":
          description: "the System Plugin configuration was not found"
        "415":
          description: "invalid content type"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.PluginsV1Service"
      x-inflector-hidden: true
  /token:
    post:
      tags:
      - "APIs"
      summary: "Retrieves an API token valid for the user identified by user object\
        \ in body"
      description: ""
      operationId: "getApiTokenByCredentials"
      consumes:
      - "application/json"
      - "application/yaml"
      parameters:
      - in: "body"
        name: "user"
        description: "user credentials"
        required: true
        schema:
          $ref: "#/definitions/UserCredentials"
        x-exportParamName: "User"
      responses:
        "200":
          description: "the API Token as string"
          schema:
            $ref: "#/definitions/AccessToken"
        "401":
          description: "API not allowed for github users"
        "404":
          description: "cannot retrieve token for given user"
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /support/email:
    post:
      tags:
      - "Support"
      summary: "Sends email to support team"
      operationId: "email"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "name"
        in: "formData"
        description: "User name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "email"
        in: "formData"
        description: "User email"
        required: true
        type: "string"
        x-exportParamName: "Email"
      - name: "subject"
        in: "formData"
        description: "Email subject"
        required: true
        type: "string"
        x-exportParamName: "Subject"
      - name: "body"
        in: "formData"
        description: "Email body"
        required: true
        type: "string"
        x-exportParamName: "Body"
      - name: "attachment"
        in: "formData"
        required: false
        type: "file"
        x-exportParamName: "Attachment"
      responses:
        "200":
          description: "Success"
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.SupportV1Service"
      x-inflector-hidden: true
  /specs:
    get:
      tags:
      - "APIs"
      - "Domains"
      summary: "Retrieves a list of currently defined APIs and Domains in APIs.json\
        \ format"
      description: ""
      operationId: "searchApisAndDomains"
      parameters:
      - name: "specType"
        in: "query"
        description: "Type of Swagger specs to search\n* API - APIs only\n* DOMAIN\
          \ - Domains only\n* ANY - Both APIs and Domains\n"
        required: false
        type: "string"
        default: "ANY"
        enum:
        - "API"
        - "DOMAIN"
        - "ANY"
        x-exportParamName: "SpecType"
        x-optionalDataType: "String"
      - name: "visibility"
        in: "query"
        description: "The visibility of a spec in SwaggerHub\n* PUBLIC - can be viewed\
          \ by anyone\n* PRIVATE - can only be viewed by you or your Org and those\
          \ that you are collaborating with or have shared it with\n* ANY - either\
          \ PUBLIC or PRIVATE\n"
        required: false
        type: "string"
        default: "ANY"
        enum:
        - "PUBLIC"
        - "PRIVATE"
        - "ANY"
        x-exportParamName: "Visibility"
        x-optionalDataType: "String"
      - name: "state"
        in: "query"
        description: "matches against published state of the spec\n* UNPUBLISHED -\
          \ spec is a draft, a work in progress\n* PUBLISHED - spec is a stable version\
          \ ready for consuming from client applications\n* ANY - either PUBLISHED\
          \ or UNPUBLISHED\n"
        required: false
        type: "string"
        default: "ALL"
        enum:
        - "ALL"
        - "PUBLISHED"
        - "UNPUBLISHED"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      - name: "owner"
        in: "query"
        description: "API or Domain owner identifier. Can be username or organization\
          \ name"
        required: false
        type: "string"
        x-exportParamName: "Owner"
        x-optionalDataType: "String"
      - name: "project"
        in: "query"
        description: "project identifier. Must be used in conjunction with owner parameter"
        required: false
        type: "string"
        x-exportParamName: "Project"
        x-optionalDataType: "String"
      - name: "oas"
        in: "query"
        description: "The OpenApi Specification (oas) version.\n* 2.0 - Formally known\
          \ as 'swagger'\n* 3.0.x - The latest supported OpenApi Specification version\
          \ by SwaggerHub.\nFor search queries all 3.0.x versions are grouped together\n"
        required: false
        type: "string"
        enum:
        - "2.0"
        - "3.0.0"
        - "3.0.1"
        - "3.0.2"
        - "3.0.3"
        x-exportParamName: "Oas"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "filter to apply, 'user' filters by current user"
        required: false
        type: "string"
        enum:
        - "user"
        x-inflector-hidden: true
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "standardization"
        in: "query"
        description: "If the Spec has any style validation errors.\n"
        required: false
        type: "string"
        enum:
        - "FAILED"
        - "CRITICAL"
        - "WARNING"
        x-exportParamName: "Standardization"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "free text query to match"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "page to return"
        required: false
        type: "integer"
        default: 0
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "number of results per page (1 .. 100)"
        required: false
        type: "integer"
        default: 10
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "sort criteria or result set\n* NAME -\n* UPATED\n* CREATED\n\
          * OWNER\n* BEST_MATCH\n* TITLE\n"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "UPDATED"
        - "CREATED"
        - "OWNER"
        - "BEST_MATCH"
        - "TITLE"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "order"
        in: "query"
        description: "sort order"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
        x-exportParamName: "Order"
        x-optionalDataType: "String"
      - name: "ignoreCount"
        in: "query"
        description: "Should the count of results that match the search be returned"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IgnoreCount"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "a list of APIs and Domains in APIs.json format"
          schema:
            $ref: "#/definitions/ApisJson"
      security:
      - TokenSecured: []
      - {}
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.SearchV1Service"
  /projects/{owner}/{projectId}:
    get:
      tags:
      - "Projects"
      summary: "get specific project by organization and id"
      description: ""
      operationId: "getProjectV2"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "Organization name (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "projectId"
        in: "path"
        description: "The name of a project(case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "the project"
          schema:
            $ref: "#/definitions/Project"
        "401":
          description: "The access token is missing or invalid"
        "403":
          description: "The projects feature is not available for the organization's\
            \ plan, or the authenticating user is not a member of the specified project.\n"
        "404":
          description: "The specified organization or project name was not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.ProjectsController"
    put:
      tags:
      - "Projects"
      summary: "Update a project"
      description: "Use this operation to update an existing project (for example,\
        \ add or remove APIs).\nWhen updating a project, the `apis` and `domains`\
        \ lists _replace_ the existing ones. This means that to add new APIs/domains\
        \ to a project, you need to send the `apis` and `domains` lists containing\
        \ both the existing and new APIs/domains.\n"
      operationId: "saveProjectV2"
      parameters:
      - name: "owner"
        in: "path"
        description: "Organization name (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "projectId"
        in: "path"
        description: "The name of a project(case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "projectRequest"
        description: "The project to create or update. Properties that are not provided\
          \ are set to empty values.\n"
        required: true
        schema:
          $ref: "#/definitions/Project"
        x-exportParamName: "ProjectRequest"
      responses:
        "200":
          description: "Existing project was updated successfully"
        "400":
          description: "Bad request. For example, some of the specified `apis` or\
            \ `domains` do not exist in the organization.\n"
          examples:
            application/json:
              error: "Unable to save project. Some api/domain entries are invalid."
        "401":
          description: "The access token is missing or invalid"
        "403":
          description: "The projects feature is not available for the organization's\
            \ plan, or the authenticating user does not have permissions to update\
            \ projects in this organization\n"
        "404":
          description: "The specified organization or project name was not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.ProjectsController"
    delete:
      tags:
      - "Projects"
      summary: "delete project"
      description: ""
      operationId: "deleteProjectV2"
      parameters:
      - name: "owner"
        in: "path"
        description: "Organization name (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "projectId"
        in: "path"
        description: "The name of a project(case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      responses:
        "204":
          description: "project was successfully deleted"
        "403":
          description: "The projects feature is not available for the organization's\
            \ plan, or the authenticating user does not have permissions to delete\
            \ projects in this organization\n"
        "404":
          description: "The specified organization or project name was not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.ProjectsController"
  /projects/{owner}/{project}/{specType}/{name}:
    put:
      tags:
      - "Projects"
      summary: "Add spec to project"
      description: ""
      operationId: "addSpecToProjectV2"
      parameters:
      - name: "owner"
        in: "path"
        description: "Organization name (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "project"
        in: "path"
        description: "project name or id"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "specType"
        in: "path"
        description: "Type of spec to add (apis or domains)"
        required: true
        type: "string"
        enum:
        - "apis"
        - "domains"
        x-exportParamName: "SpecType"
      - name: "name"
        in: "path"
        description: "spec name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Spec was successfully added to project"
        "403":
          description: "The projects feature is not available for the organization's\
            \ plan, or the authenticating user does not have permissions to add the\
            \ spec to this project\n"
        "404":
          description: "The specified organization or project name was not found"
        "409":
          description: "The spec already exists in the project"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.ProjectsController"
  /projects/{owner}/{projectId}/members:
    get:
      tags:
      - "Projects"
      summary: "get project members"
      description: " get project members"
      operationId: "getProjectMembersV2"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "projectId"
        in: "path"
        description: "The name of a project(case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "project members"
          schema:
            $ref: "#/definitions/ProjectMemberList"
        "401":
          description: "The access token is missing or invalid"
        "403":
          description: "The projects feature is not available for the organization's\
            \ plan, or the authenticating user is not a member of the specified project.\n"
        "404":
          description: "The specified organization or project name was not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.ProjectsController"
    put:
      tags:
      - "Projects"
      summary: "Update project members"
      description: "When updating a project, the `members` lists _replace_ the existing\
        \ ones. This means that to add new members to a project, you need to send\
        \ the `members` lists containing both the existing and new members.\n"
      operationId: "updateProjectMembersV2"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "projectId"
        in: "path"
        description: "The name of a project(case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "projectMemberList"
        description: "the list of project member names"
        required: true
        schema:
          $ref: "#/definitions/ProjectMemberList"
        x-exportParamName: "ProjectMemberList"
      responses:
        "200":
          description: "The project members were successfully updated"
        "403":
          description: "The projects feature is not available for the organization's\
            \ plan, or the authenticating user does not have permissions to update\
            \ the members of this project\n"
        "404":
          description: "The specified organization or project name was not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.ProjectsController"
  /projects:
    get:
      tags:
      - "Projects"
      summary: "get projects for user identified by token"
      description: ""
      operationId: "getUserProjects"
      produces:
      - "application/json"
      parameters:
      - name: "nameOnly"
        in: "query"
        description: "exclude API and Domain information"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "NameOnly"
        x-optionalDataType: "Bool"
      - name: "page"
        in: "query"
        description: "page to return"
        required: false
        type: "integer"
        default: 0
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "number of results per page (1 .. 100)"
        required: false
        type: "integer"
        default: 10
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "sort criteria or result set\n* NAME\n* OWNER\n"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "OWNER"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "order"
        in: "query"
        description: "sort order"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
        x-exportParamName: "Order"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "user projects"
          schema:
            $ref: "#/definitions/ProjectsJson"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.ProjectsController"
  /projects/{owner}:
    get:
      tags:
      - "Projects"
      summary: "get projects belonging to specific org"
      description: ""
      operationId: "getOrgProjectsV2"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "nameOnly"
        in: "query"
        description: "exclude API and Domain information"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "NameOnly"
        x-optionalDataType: "Bool"
      - name: "page"
        in: "query"
        description: "page to return"
        required: false
        type: "integer"
        default: 0
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "number of results per page (1 .. 100)"
        required: false
        type: "integer"
        default: 10
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "order"
        in: "query"
        description: "sort order"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
        x-exportParamName: "Order"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "organization projects"
          schema:
            $ref: "#/definitions/ProjectsJson"
        "403":
          description: "The projects feature is not available for the organization's\
            \ plan.\n"
        "404":
          description: "The specified organization was not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.ProjectsController"
    post:
      tags:
      - "Projects"
      summary: "Creates a project"
      description: "Use this operation to create a new project in an organization.\n"
      operationId: "createProject"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - in: "body"
        name: "projectRequest"
        description: "The project to create or update. Properties that are not provided\
          \ are set to empty values.\n"
        required: true
        schema:
          $ref: "#/definitions/Project"
        x-exportParamName: "ProjectRequest"
      responses:
        "201":
          description: "Project was created successfully"
        "400":
          description: "Bad request. For example, some of the specified `apis` or\
            \ `domains` do not exist in the organization.\n"
          examples:
            application/json:
              error: "Unable to create project. Some api/domain entries are invalid."
        "401":
          description: "The access token is missing or invalid"
        "403":
          description: "The projects feature is not available for the organization's\
            \ plan, or the authenticating user does not have permissions to create\
            \ projects in this organization\n"
        "404":
          description: "The specified organization was not found"
        "409":
          description: "The specified project already exists"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.ProjectsController"
  /validations/{orgName}:
    get:
      tags:
      - "Validations"
      summary: "get an Orgs style validation configuration"
      description: ""
      operationId: "getOrgsStyleValidationConfiguration"
      produces:
      - "application/json"
      parameters:
      - name: "orgName"
        in: "path"
        description: "organization name"
        required: true
        type: "string"
        x-exportParamName: "OrgName"
      - name: "exploreMode"
        in: "query"
        description: "if true and no config exists for Org return an empty OrgStyleValidationConfiguration\
          \ object"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "ExploreMode"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "successful request"
          schema:
            $ref: "#/definitions/OrgStyleValidationConfiguration"
        "204":
          description: "no config exists for Org"
        "401":
          description: "unauthorised"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.OrgStyleValidationService"
    put:
      tags:
      - "Validations"
      summary: "create or update orgs style validation configuration"
      description: ""
      operationId: "updateOrgsStyleValidationConfiguration"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "orgName"
        in: "path"
        description: "organization name"
        required: true
        type: "string"
        x-exportParamName: "OrgName"
      - in: "body"
        name: "OrgStyleValidationConfiguration"
        description: "Configuration that is to be saved"
        required: true
        schema:
          $ref: "#/definitions/OrgStyleValidationConfiguration"
        x-exportParamName: "OrgStyleValidationConfiguration"
      responses:
        "200":
          description: "successful request"
        "401":
          description: "unauthorised"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.OrgStyleValidationService"
  /validations/scanstatus/{orgName}:
    get:
      tags:
      - "Validations"
      summary: "gets the current status of a scan for the given org"
      description: ""
      operationId: "getOrgsStyleValidationScanStatus"
      produces:
      - "application/json"
      parameters:
      - name: "orgName"
        in: "path"
        description: "organization name"
        required: true
        type: "string"
        x-exportParamName: "OrgName"
      responses:
        "200":
          description: "successful request"
          schema:
            type: "object"
        "401":
          description: "unauthorised"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.OrgStyleValidationService"
  /validations:
    post:
      tags:
      - "Validations"
      summary: "checks if any one of a group of orgs has style validation enabled"
      description: "Returns style validation status for a list of given orgs"
      operationId: "checkOrgsStyleValidationStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "orgs"
        description: "list of users orgs"
        required: true
        schema:
          type: "array"
          items:
            type: "string"
        x-exportParamName: "Orgs"
      responses:
        "200":
          description: "successful request"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrgStyleValidationEnabled"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.OrgStyleValidationService"
  /apis/{owner}/{api}/{version}/validation:
    get:
      tags:
      - "APIs"
      summary: "Retrieves Style Validation issues."
      description: "Retrieves the Organization Style Validation issues related to\
        \ an API version."
      operationId: "getValidation"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "the Style validation issues generated for this API/version."
          schema:
            $ref: "#/definitions/ValidationResult"
        "404":
          description: "specified API not found"
        "403":
          description: "Forbidden"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.OrgStyleController"
    put:
      tags:
      - "APIs"
      summary: "Updates an API record with the latest style validation result."
      description: ""
      operationId: "updateValidationErrorsOnAPI"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "apiValidationUpdate"
        required: true
        schema:
          $ref: "#/definitions/ApiValidationUpdate"
        x-exportParamName: "ApiValidationUpdate"
      responses:
        "200":
          description: "the API has been updated correctly."
        "404":
          description: "specified API not found"
        "403":
          description: "Forbidden"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.ApisV1Service"
  /userAssets:
    get:
      tags:
      - "APIs"
      - "Domains"
      summary: "Gets a list of recent product assets this user has access to - corresponds\
        \ to the ASSETS type for product endpoints as exposed by the products-api"
      description: ""
      operationId: "getUserAssets"
      parameters:
      - name: "type"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "number of results per page (1 .. 100)"
        required: false
        type: "integer"
        default: 10
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "a list of user asset"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserAsset"
      security:
      - TokenSecured: []
      - {}
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.SearchV1Service"
  /custom-rules/{orgName}:
    get:
      tags:
      - "Custom Rules"
      summary: "Get Organization Custom Rules"
      operationId: "getCustomRules"
      produces:
      - "application/json"
      parameters:
      - name: "orgName"
        in: "path"
        description: "organization name"
        required: true
        type: "string"
        x-exportParamName: "OrgName"
      responses:
        "200":
          description: "Successful request"
          schema:
            type: "object"
        "400":
          description: "Invalid request"
        "404":
          description: "Org not found"
        "500":
          description: "Internal server error"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.CustomRulesService"
    put:
      tags:
      - "Custom Rules"
      summary: "Updates Organization Custom Rules"
      operationId: "saveCustomRules"
      produces:
      - "application/json"
      parameters:
      - name: "orgName"
        in: "path"
        description: "organization name"
        required: true
        type: "string"
        x-exportParamName: "OrgName"
      - in: "body"
        name: "customRules"
        required: true
        schema:
          $ref: "#/definitions/RulesDefinition"
        x-exportParamName: "CustomRules"
      responses:
        "200":
          description: "Successfully saved"
        "400":
          description: "Invalid request"
        "404":
          description: "Org not found"
        "500":
          description: "Internal server error"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.service.CustomRulesService"
  /v2/specs:
    get:
      tags:
      - "APIs"
      - "Domains"
      - "Search V2"
      summary: "Temporary endpoint for phase one of Elasicsearch implementation. Accepts\
        \ redirected requests from /specs"
      description: ""
      operationId: "searchApisAndDomainsV2"
      parameters:
      - name: "specType"
        in: "query"
        description: "Type of Swagger specs to search\n* API - APIs only\n* DOMAIN\
          \ - Domains only\n* ANY - Both APIs and Domains\n"
        required: false
        type: "string"
        default: "ANY"
        enum:
        - "API"
        - "DOMAIN"
        - "ANY"
        x-exportParamName: "SpecType"
        x-optionalDataType: "String"
      - name: "visibility"
        in: "query"
        description: "The visibility of a spec in SwaggerHub\n* PUBLIC - can be viewed\
          \ by anyone\n* PRIVATE - can only be viewed by you or your Org and those\
          \ that you are collaborating with or have shared it with\n* ANY - either\
          \ PUBLIC or PRIVATE\n"
        required: false
        type: "string"
        default: "ANY"
        enum:
        - "PUBLIC"
        - "PRIVATE"
        - "ANY"
        x-exportParamName: "Visibility"
        x-optionalDataType: "String"
      - name: "state"
        in: "query"
        description: "matches against published state of the spec\n* UNPUBLISHED -\
          \ spec is a draft, a work in progress\n* PUBLISHED - spec is a stable version\
          \ ready for consuming from client applications\n* ANY - either PUBLISHED\
          \ or UNPUBLISHED\n"
        required: false
        type: "string"
        default: "ALL"
        enum:
        - "ALL"
        - "PUBLISHED"
        - "UNPUBLISHED"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      - name: "owner"
        in: "query"
        description: "API or Domain owner identifier. Can be username or organization\
          \ name"
        required: false
        type: "string"
        x-exportParamName: "Owner"
        x-optionalDataType: "String"
      - name: "project"
        in: "query"
        description: "project identifier. Must be used in conjunction with owner parameter"
        required: false
        type: "string"
        x-exportParamName: "Project"
        x-optionalDataType: "String"
      - name: "oas"
        in: "query"
        description: "The OpenApi Specification (oas) version.\n* 2.0 - Formally known\
          \ as 'swagger'\n* 3.0.x - The latest supported OpenApi Specification version\
          \ by SwaggerHub.\nFor search queries all 3.0.x versions are grouped together\n"
        required: false
        type: "string"
        enum:
        - "2.0"
        - "3.0.0"
        - "3.0.1"
        - "3.0.2"
        - "3.0.3"
        x-exportParamName: "Oas"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "filter to apply, 'user' filters by current user"
        required: false
        type: "string"
        enum:
        - "user"
        x-inflector-hidden: true
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "standardization"
        in: "query"
        description: "If the Spec has any style validation errors.\n"
        required: false
        type: "string"
        enum:
        - "FAILED"
        - "CRITICAL"
        - "WARNING"
        x-exportParamName: "Standardization"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "free text query to match"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "page to return"
        required: false
        type: "integer"
        default: 0
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "number of results per page (1 .. 100)"
        required: false
        type: "integer"
        default: 10
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "sort criteria or result set\n* NAME -\n* UPATED\n* CREATED\n\
          * OWNER\n* BEST_MATCH\n* TITLE\n"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "UPDATED"
        - "CREATED"
        - "OWNER"
        - "BEST_MATCH"
        - "TITLE"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "order"
        in: "query"
        description: "sort order"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
        x-exportParamName: "Order"
        x-optionalDataType: "String"
      - name: "ignoreCount"
        in: "query"
        description: "Should the count of results that match the search be returned"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IgnoreCount"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "a list of APIs and Domains in APIs.json format"
          schema:
            $ref: "#/definitions/ApisJson"
      security:
      - TokenSecured: []
      - {}
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.ElasticSearchController"
  /v2/specs/upload:
    get:
      tags:
      - "Search V2"
      summary: "Upload all spec to ES."
      operationId: "uploadAllSpecs"
      parameters: []
      responses:
        "200":
          description: "upload was started"
        "403":
          description: "upload already in progress"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.ElasticSearchController"
  /v2/specs/upload/{typeOfSpec}/{owner}/{api}/{version}/{eventType}:
    get:
      tags:
      - "Search V2"
      summary: "Upload a single spec to ES."
      operationId: "uploadSpec"
      parameters:
      - name: "typeOfSpec"
        in: "path"
        description: "Type of Swagger spec\n* API\n* DOMAIN\n* ALL\n"
        required: true
        type: "string"
        enum:
        - "API"
        - "DOMAIN"
        - "ALL"
        x-exportParamName: "TypeOfSpec"
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "eventType"
        in: "path"
        description: "lifecycle event type"
        required: true
        type: "string"
        enum:
        - "CREATE"
        - "UPDATE"
        - "DELETE"
        x-exportParamName: "EventType"
      responses:
        "200":
          description: "spec was successfully updated"
        "403":
          description: "access denied"
        "404":
          description: "spec not found"
        "500":
          description: "unexpected error"
      security:
      - TokenSecured: []
      x-inflector-hidden: true
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.ElasticSearchController"
  /apis/{owner}/{api}/{version}/integrations:
    post:
      tags:
      - "Integrations"
      - "APIs"
      summary: "Creates an Integration for the given API"
      description: "Creates an Integration for the given API. The integration type\
        \ is determined by which model is used in the body."
      operationId: "createIntegration"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "integrationTypeConfiguration"
        description: "Can be one of the following objects: `AutoMockingIntegration`,\
          \ `AzureDevopsServerIntegration`, `AzureDevopsServicesIntegration`, `BitbucketCloudIntegration`,\
          \ `BitbucketServerIntegration`, `GitHubIntegration`, `GitHubEnterpriseIntegration`\
          \ or `GitLabIntegration` or `WebhookIntegration`\n"
        required: true
        schema:
          type: "object"
          example:
            configType: "GITHUB"
            name: "Java client SDK"
            token: "abcd12345"
            owner: "myOrg"
            repository: "petstore"
            branch: "develop"
            target: "java"
            syncMethod: "Advanced Sync"
            outputFolder: "sdk/java"
            providedPaths:
            - "*"
            managedPaths: []
            ignoredPaths: []
            enabled: true
        x-exportParamName: "IntegrationTypeConfiguration"
      responses:
        "201":
          description: "Integration was successfully created"
        "400":
          description: "The integration configuration was invalid"
        "401":
          description: "Unauthorized"
        "403":
          description: "Access denied"
        "404":
          description: "owner, api, version combination not found"
        "409":
          description: "Integration name already exists for API for different integration\
            \ type"
        "415":
          description: "Invalid content type"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.IntegrationsController"
  /apis/{owner}/{api}/{version}/integrations/{integrationId}:
    get:
      tags:
      - "Integrations"
      - "APIs"
      summary: "Retrieves the specified API integration."
      description: "Retrieves an integration for the given API."
      operationId: "getIntegrationById"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "integrationId"
        in: "path"
        description: "integration identifier"
        required: true
        type: "string"
        x-exportParamName: "IntegrationId"
      responses:
        "200":
          description: "Can be one of the following objects: `AutoMockingIntegration`,\
            \ `AzureDevopsServerIntegration`, `AzureDevopsServicesIntegration`, `BitbucketCloudIntegration`,\
            \ `BitbucketServerIntegration`, `GitHubIntegration`, `GitHubEnterpriseIntegration`\
            \ or `GitLabIntegration` or `WebhookIntegration`\n"
          schema:
            type: "object"
            example:
              configType: "GITHUB"
              name: "Java client SDK"
              owner: "myOrg"
              repository: "petstore"
              branch: "develop"
              target: "java"
              syncMethod: "Advanced Sync"
              outputFolder: "sdk/java"
              providedPaths:
              - "*"
              managedPaths: []
              ignoredPaths: []
              enabled: true
        "401":
          description: "Unauthorized"
        "403":
          description: "User doesn't have permission to retrieve integrations in this\
            \ API"
        "404":
          description: "owner, api, version, integrationId combination not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.IntegrationsController"
    delete:
      tags:
      - "Integrations"
      - "APIs"
      summary: "Delete the specified API integration."
      description: "Delete an existing integration for the given API."
      operationId: "deleteIntegration"
      parameters:
      - name: "owner"
        in: "path"
        description: "API or Domain owner identifier (case-sensitive)"
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "api"
        in: "path"
        description: "API identifier"
        required: true
        type: "string"
        x-exportParamName: "Api"
      - name: "version"
        in: "path"
        description: "version identifier"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "integrationId"
        in: "path"
        description: "integration identifier"
        required: true
        type: "string"
        x-exportParamName: "IntegrationId"
      responses:
        "204":
          description: "Integration was successfully deleted"
        "401":
          description: "Unauthorized"
        "403":
          description: "User doesn't have permission to delete integrations in this\
            \ API"
        "404":
          description: "The specified API or integration ID was not found"
      security:
      - TokenSecured: []
      x-swagger-router-controller: "com.smartbear.swaggerhub.registry.controllers.IntegrationsController"
securityDefinitions:
  TokenSecured:
    description: "Specify your SwaggerHub API key found in https://app.swaggerhub.com/settings/apiKey."
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  ApiMetadata:
    type: "object"
    required:
    - "categories"
    - "tags"
    properties:
      defaultVersion:
        type: "string"
      categories:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      tags:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      links:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/ApiMetadataLink"
    example:
      links:
      - type: "type"
        url: "url"
      - type: "type"
        url: "url"
      categories:
      - "categories"
      - "categories"
      defaultVersion: "defaultVersion"
      tags:
      - "tags"
      - "tags"
  ApiMetadataLink:
    type: "object"
    required:
    - "type"
    - "url"
    properties:
      type:
        type: "string"
      url:
        type: "string"
    example:
      type: "type"
      url: "url"
  LifecycleSettings:
    type: "object"
    properties:
      published:
        type: "boolean"
    example:
      published: true
  VisibilitySettings:
    type: "object"
    required:
    - "private"
    properties:
      private:
        type: "boolean"
    example:
      private: true
  GitHubExportSettings:
    type: "object"
    required:
    - "branch"
    - "notificationEmail"
    - "owner"
    - "repository"
    - "token"
    properties:
      token:
        type: "string"
      owner:
        type: "string"
      repository:
        type: "string"
      branch:
        type: "string"
      path:
        type: "string"
      yamlPath:
        type: "string"
      notificationEmail:
        type: "string"
      service:
        type: "string"
        example: "GitHub"
      enabled:
        type: "boolean"
        default: true
      lastResult:
        $ref: "#/definitions/AbstractResult"
    example:
      owner: "owner"
      path: "path"
      lastResult:
        error: "error"
        type: "success"
        timestamp: "2000-01-23T04:56:07.000+00:00"
      service: "GitHub"
      repository: "repository"
      branch: "branch"
      notificationEmail: "notificationEmail"
      yamlPath: "yamlPath"
      enabled: true
      token: "token"
  AbstractResult:
    type: "object"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      error:
        type: "string"
      type:
        type: "string"
        example: "success"
        description: "Can be one of two values \"success\" or \"failure\""
    example:
      error: "error"
      type: "success"
      timestamp: "2000-01-23T04:56:07.000+00:00"
  ApisJsonProperty:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
      url:
        type: "string"
      value:
        type: "string"
    description: "An API property. Has a `type` and either `url` or `value`."
    example:
      type: "type"
      value: "value"
      url: "url"
  ApisJson:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      url:
        type: "string"
      created:
        type: "string"
        format: "date-time"
      modified:
        type: "string"
        format: "date-time"
      specificationVersion:
        type: "string"
      offset:
        type: "integer"
        format: "int32"
      totalCount:
        type: "integer"
        format: "int64"
      apis:
        type: "array"
        items:
          $ref: "#/definitions/ApisJsonApi"
    example:
      offset: 0
      apis:
      - name: "name"
        description: "description"
        properties:
        - type: "type"
          value: "value"
          url: "url"
        - type: "type"
          value: "value"
          url: "url"
        tags:
        - "tags"
        - "tags"
      - name: "name"
        description: "description"
        properties:
        - type: "type"
          value: "value"
          url: "url"
        - type: "type"
          value: "value"
          url: "url"
        tags:
        - "tags"
        - "tags"
      created: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      description: "description"
      modified: "2000-01-23T04:56:07.000+00:00"
      totalCount: 6
      url: "url"
      specificationVersion: "specificationVersion"
  ApisJsonApi:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      tags:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      properties:
        type: "array"
        items:
          $ref: "#/definitions/ApisJsonProperty"
    example:
      name: "name"
      description: "description"
      properties:
      - type: "type"
        value: "value"
        url: "url"
      - type: "type"
        value: "value"
        url: "url"
      tags:
      - "tags"
      - "tags"
  ApisJsonUrlProperty:
    allOf:
    - $ref: "#/definitions/ApisJsonProperty"
    - type: "object"
      properties:
        url:
          type: "string"
          format: "url"
      description: "an API property where the value is a URL"
  ApisJsonValueProperty:
    allOf:
    - $ref: "#/definitions/ApisJsonProperty"
    - type: "object"
      properties:
        value:
          type: "string"
      description: "an API property with a string value"
  VersionMetadata:
    type: "object"
    properties:
      codegenSettings:
        $ref: "#/definitions/CodegenSettings"
  CodegenSettings:
    type: "object"
    properties:
      server:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/CodegenLanguage"
      client:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/CodegenLanguage"
  CodegenLanguage:
    type: "object"
    properties:
      visible:
        type: "boolean"
        default: true
      customValues:
        type: "object"
        properties: {}
    example:
      visible: true
      customValues: "{}"
  Comparison:
    type: "array"
    description: "a list of differences between two APIs"
    items:
      $ref: "#/definitions/ComparisonPart"
  ComparisonPart:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
        description: "the type of change that this part describes\n* UNMODIFIED -\
          \ this part is the same in both APIs. Only available for FULL compare.\n\
          * INSERTED - this is present in `other` but missing in `base`. `base` will\
          \ not be present.\n* DELETED - this is present in `base` but missing in\
          \ `other`. `other` will not be present.\n* CHANGED - this has been changed\
          \ between `base` and `other`. Both `base` and `other` present.\n"
        enum:
        - "UNMODIFIED"
        - "INSERTED"
        - "DELETED"
        - "CHANGED"
      base:
        $ref: "#/definitions/ComparisonDetail"
      other:
        $ref: "#/definitions/ComparisonDetail"
    description: "a part of the API that was (or wasn't) changed"
  ComparisonDetail:
    type: "object"
    required:
    - "content"
    - "endPosition"
    - "startPosition"
    properties:
      startPosition:
        $ref: "#/definitions/Position"
      endPosition:
        $ref: "#/definitions/Position"
      content:
        type: "string"
        description: "the content of the API definition between `startPosition` and\
          \ `endPosition`"
      path:
        type: "string"
        description: "the path to the object (notation similar to JSONPath)"
    description: "details for one side of a ComparisonPart"
  Position:
    type: "object"
    required:
    - "column"
    - "line"
    properties:
      line:
        type: "integer"
      column:
        type: "integer"
    description: "a position in a text document"
  ForkVersion:
    type: "object"
    required:
    - "name"
    - "owner"
    - "version"
    properties:
      owner:
        type: "string"
        minLength: 3
      name:
        type: "string"
        minLength: 3
        maxLength: 60
      version:
        type: "string"
        minLength: 1
        maxLength: 128
      project:
        type: "string"
        minLength: 1
      private:
        type: "boolean"
        description: "Whether the forked version should be public (`false`) or private\
          \ (`true`). If the value is not set, then the original version's setting\
          \ will be used."
  SpecId:
    type: "object"
    required:
    - "name"
    - "owner"
    - "version"
    properties:
      owner:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
      projectName:
        type: "string"
  PluginDefinition:
    type: "object"
    required:
    - "configurationSchema"
    - "createdBy"
    - "createdOn"
    - "enabled"
    - "implementingClass"
    - "name"
    - "version"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      implementingClass:
        type: "string"
      version:
        type: "string"
      createdBy:
        type: "string"
      createdOn:
        type: "string"
        format: "date-time"
      enabled:
        type: "boolean"
      configurationSchema:
        type: "object"
        properties: {}
      limit:
        type: "integer"
        format: "int64"
        description: "count of allowed configurations"
    example:
      createdBy: "createdBy"
      name: "name"
      configurationSchema: "{}"
      limit: 0
      id: "id"
      version: "version"
      createdOn: "2000-01-23T04:56:07.000+00:00"
      enabled: true
      implementingClass: "implementingClass"
    x-swagger-router-model: "com.smartbear.swaggerhub.plugins.model.PluginDefinition"
  PluginConfiguration:
    type: "object"
    required:
    - "definitionId"
    - "lifecycles"
    - "objectId"
    - "ownerName"
    - "path"
    properties:
      id:
        type: "string"
        format: "UUID"
      name:
        type: "string"
      objectId:
        type: "string"
      lifecycles:
        type: "array"
        items:
          type: "string"
      configuration:
        type: "object"
        properties: {}
      ownerName:
        type: "string"
      path:
        type: "string"
      definitionId:
        type: "string"
      draft:
        type: "boolean"
    example:
      path: "path"
      ownerName: "ownerName"
      configuration: "{}"
      draft: true
      name: "name"
      id: "id"
      lifecycles:
      - "lifecycles"
      - "lifecycles"
      objectId: "objectId"
      definitionId: "definitionId"
    x-swagger-router-model: "com.smartbear.swaggerhub.plugins.model.PluginConfiguration"
  SystemPluginConfiguration:
    type: "object"
    required:
    - "implementingClass"
    - "lifecycles"
    - "version"
    properties:
      id:
        type: "string"
        format: "UUID"
      lifecycles:
        type: "array"
        items:
          type: "string"
      configuration:
        type: "object"
        additionalProperties:
          type: "string"
      implementingClass:
        type: "string"
      version:
        type: "string"
    example:
      configuration:
        key: "configuration"
      id: "id"
      lifecycles:
      - "lifecycles"
      - "lifecycles"
      version: "version"
      implementingClass: "implementingClass"
    x-swagger-router-model: "com.smartbear.swaggerhub.plugins.model.SystemPluginConfiguration"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      active:
        type: "boolean"
    example:
      active: true
      id: "id"
  UserCredentials:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
    example:
      password: "password"
      username: "username"
  Comment:
    type: "object"
    required:
    - "body"
    - "id"
    - "user"
    properties:
      id:
        type: "string"
      user:
        $ref: "#/definitions/User"
      created:
        type: "string"
        format: "date-time"
      modified:
        type: "string"
        format: "date-time"
      body:
        type: "string"
    example:
      created: "2000-01-23T04:56:07.000+00:00"
      modified: "2000-01-23T04:56:07.000+00:00"
      id: "id"
      body: "body"
      user:
        active: true
        id: "id"
  ClosableComment:
    allOf:
    - $ref: "#/definitions/Comment"
    - type: "object"
      properties:
        position:
          type: "integer"
          format: "int32"
        status:
          type: "string"
          enum:
          - "OPEN"
          - "RESOLVED"
        replies:
          type: "array"
          items:
            $ref: "#/definitions/Comment"
  NewComment:
    type: "object"
    required:
    - "body"
    - "position"
    properties:
      position:
        type: "integer"
        format: "int32"
        minimum: 0
      body:
        type: "string"
      replies:
        type: "array"
        items:
          $ref: "#/definitions/NewReply"
  NewReply:
    type: "object"
    required:
    - "body"
    properties:
      body:
        type: "string"
  CommentPatch:
    type: "object"
    properties:
      body:
        type: "string"
  ClosableCommentPatch:
    allOf:
    - $ref: "#/definitions/CommentPatch"
    - type: "object"
      properties:
        position:
          type: "integer"
          format: "int32"
          minimum: 0
  CommentsBatch:
    type: "object"
    properties:
      addComment:
        type: "array"
        items:
          $ref: "#/definitions/NewComment"
      updateComment:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/ClosableCommentPatch"
      updateStatus:
        type: "object"
        additionalProperties:
          type: "string"
          enum:
          - "OPEN"
          - "RESOLVED"
      deleteComment:
        type: "array"
        items:
          type: "string"
      addReply:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            $ref: "#/definitions/NewReply"
      updateReply:
        type: "object"
        additionalProperties:
          type: "object"
          additionalProperties:
            $ref: "#/definitions/CommentPatch"
      deleteReply:
        type: "object"
        additionalProperties:
          type: "array"
          uniqueItems: true
          items:
            type: "string"
  AccessToken:
    type: "object"
    properties:
      token:
        type: "string"
    example:
      token: "token"
  Template:
    type: "object"
    required:
    - "id"
    - "title"
    properties:
      id:
        type: "string"
      title:
        type: "string"
      oas:
        type: "string"
    example:
      oas: "oas"
      id: "id"
      title: "title"
  TemplateCatalog:
    type: "object"
    properties:
      templates:
        type: "array"
        items:
          $ref: "#/definitions/Template"
      default:
        $ref: "#/definitions/Template"
    example:
      default:
        oas: "oas"
        id: "id"
        title: "title"
      templates:
      - oas: "oas"
        id: "id"
        title: "title"
      - oas: "oas"
        id: "id"
        title: "title"
  Collaboration:
    type: "object"
    properties:
      owner:
        type: "string"
        readOnly: true
      owners:
        type: "array"
        readOnly: true
        items:
          type: "string"
      hint:
        $ref: "#/definitions/CollaborationHint"
      members:
        type: "array"
        items:
          $ref: "#/definitions/CollaborationMembership"
      pendingMembers:
        type: "array"
        items:
          $ref: "#/definitions/CollaborationMembership"
      teams:
        type: "array"
        items:
          $ref: "#/definitions/CollaborationTeamMembership"
    example:
      owner: "owner"
      teams:
      - ""
      - ""
      hint:
        type: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      members:
      - ""
      - ""
      owners:
      - "owners"
      - "owners"
      pendingMembers:
      - ""
      - ""
    x-swagger-router-model: "com.smartbear.swaggerhub.collaboration.models.Collaboration"
  CollaborationMembershipList:
    type: "object"
    required:
    - "hint"
    properties:
      hint:
        $ref: "#/definitions/CollaborationHint"
      items:
        type: "array"
        items:
          $ref: "#/definitions/CollaborationMembership"
  CollaborationRoles:
    type: "object"
    properties:
      owner:
        type: "string"
      api:
        type: "string"
      roles:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
          enum:
          - "EDIT"
          - "COMMENT"
          - "VIEW"
  CollaborationTeamMembership:
    allOf:
    - $ref: "#/definitions/CollaborationMembership"
    - type: "object"
      properties:
        members:
          type: "array"
          readOnly: true
          items:
            $ref: "#/definitions/CollaborationMember"
  CollaborationHint:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
        format: "uuid"
        description: "type identifier of the managed entity"
    example:
      type: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  CollaborationMembership:
    allOf:
    - $ref: "#/definitions/CollaborationMember"
    - type: "object"
      required:
      - "roles"
      properties:
        roles:
          type: "array"
          items:
            type: "string"
            enum:
            - "EDIT"
            - "COMMENT"
            - "VIEW"
        donotdisturb:
          type: "boolean"
          readOnly: true
        blocked:
          type: "boolean"
          readOnly: true
  CollaborationMember:
    type: "object"
    required:
    - "name"
    properties:
      uuid:
        type: "string"
        readOnly: true
      name:
        type: "string"
      title:
        type: "string"
        readOnly: true
      startTime:
        type: "string"
        format: "date-time"
        readOnly: true
  Project:
    type: "object"
    properties:
      owner:
        type: "string"
        example: "Org1"
        description: "Organization in which the project exists"
        readOnly: true
      name:
        type: "string"
        example: "API Project"
        description: "Project name"
      description:
        type: "string"
        example: "Project description"
        description: "Project description"
        default: ""
      apis:
        type: "array"
        example:
        - "petstore"
        description: "A list of APIs included in this project. The APIs must belong\
          \ to the same organization as the project. API names are case-sensitive.\n"
        items:
          type: "string"
          description: "API name (case-sensitive)"
      domains:
        type: "array"
        example:
        - "common-models"
        description: "A list of domains included in this project. The domains must\
          \ belong to the same organization as the project. Domain names are case-sensitive.\n"
        items:
          type: "string"
          description: "Domain name (case-sensitive)"
    example:
      owner: "Org1"
      apis:
      - "petstore"
      name: "API Project"
      description: "Project description"
      domains:
      - "common-models"
  ProjectsJson:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int32"
      totalCount:
        type: "integer"
        format: "int64"
      projects:
        type: "array"
        items:
          $ref: "#/definitions/Project"
    example:
      projects:
      - owner: "Org1"
        apis:
        - "petstore"
        name: "API Project"
        description: "Project description"
        domains:
        - "common-models"
      - owner: "Org1"
        apis:
        - "petstore"
        name: "API Project"
        description: "Project description"
        domains:
        - "common-models"
      offset: 0
      totalCount: 6
  EntryId:
    type: "object"
    properties:
      owner:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
    x-swagger-router-model: "com.smartbear.swaggerhub.registry.EntryId"
  ProjectMember:
    type: "object"
    required:
    - "name"
    - "type"
    properties:
      name:
        type: "string"
      type:
        type: "string"
        default: "USER"
        enum:
        - "USER"
        - "TEAM"
      roles:
        type: "array"
        readOnly: true
        items:
          type: "string"
          enum:
          - "MEMBER"
          - "OWNER"
    example:
      roles:
      - "MEMBER"
      - "MEMBER"
      name: "name"
      type: "USER"
  ProjectMemberList:
    type: "object"
    properties:
      members:
        type: "array"
        items:
          $ref: "#/definitions/ProjectMember"
    example:
      members:
      - roles:
        - "MEMBER"
        - "MEMBER"
        name: "name"
        type: "USER"
      - roles:
        - "MEMBER"
        - "MEMBER"
        name: "name"
        type: "USER"
  SimpleSpec:
    type: "object"
    properties:
      owner:
        type: "string"
      name:
        type: "string"
  MissingSpecMembers:
    type: "object"
    properties:
      spec:
        $ref: "#/definitions/SimpleSpec"
      names:
        type: "array"
        items:
          type: "string"
  NotCollaboratorProjectMembers:
    type: "object"
    properties:
      missingApisMembers:
        type: "array"
        items:
          $ref: "#/definitions/MissingSpecMembers"
      missingDomainsMembers:
        type: "array"
        items:
          $ref: "#/definitions/MissingSpecMembers"
      missingApisTeams:
        type: "array"
        items:
          $ref: "#/definitions/MissingSpecMembers"
      missingDomainsTeams:
        type: "array"
        items:
          $ref: "#/definitions/MissingSpecMembers"
  Page:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int64"
      items:
        type: "array"
        items:
          type: "object"
          properties: {}
  DraftModel:
    type: "object"
    properties:
      yaml:
        type: "string"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/ClosableComment"
    example:
      comments:
      - ""
      - ""
      yaml: "yaml"
  NotificationPreferences:
    type: "object"
    properties:
      enabled:
        type: "array"
        items:
          type: "string"
    example:
      enabled:
      - "enabled"
      - "enabled"
  OrgStyleValidationRule:
    type: "object"
    properties:
      type:
        type: "string"
        enum:
        - "DROPDOWN"
        - "CHECKBOX"
        - "TEXT"
      title:
        type: "string"
      description:
        type: "string"
      value:
        type: "string"
        default: ""
      checked:
        type: "boolean"
      severity:
        type: "string"
        enum:
        - "CRITICAL"
        - "WARNING"
      oasVersions:
        type: "array"
        items:
          type: "string"
      options:
        type: "array"
        items:
          type: "string"
    example:
      severity: "CRITICAL"
      oasVersions:
      - "oasVersions"
      - "oasVersions"
      options:
      - "options"
      - "options"
      description: "description"
      checked: true
      type: "DROPDOWN"
      title: "title"
      value: "value"
  OrgStyleValidationRuleGroup:
    properties:
      properties:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/OrgStyleValidationRule"
      title:
        type: "string"
    example:
      title: "title"
      properties:
        key:
          severity: "CRITICAL"
          oasVersions:
          - "oasVersions"
          - "oasVersions"
          options:
          - "options"
          - "options"
          description: "description"
          checked: true
          type: "DROPDOWN"
          title: "title"
          value: "value"
  OrgStyleValidationConfiguration:
    properties:
      title:
        type: "string"
      properties:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/OrgStyleValidationRuleGroup"
      enabled:
        type: "boolean"
        default: true
      scanRunning:
        type: "boolean"
        default: true
      description:
        type: "string"
      customRules:
        type: "string"
      rulesInSync:
        type: "boolean"
    example:
      customRules: "customRules"
      rulesInSync: true
      scanRunning: true
      description: "description"
      title: "title"
      properties:
        key:
          title: "title"
          properties:
            key:
              severity: "CRITICAL"
              oasVersions:
              - "oasVersions"
              - "oasVersions"
              options:
              - "options"
              - "options"
              description: "description"
              checked: true
              type: "DROPDOWN"
              title: "title"
              value: "value"
      enabled: true
  OrgStyleValidationEnabled:
    properties:
      orgName:
        type: "string"
      enabled:
        type: "boolean"
    description: "Contains an orgs style validation stauts"
    example:
      orgName: "orgName"
      enabled: true
  ValidationResult:
    type: "object"
    properties:
      validation:
        type: "array"
        example: []
        items:
          $ref: "#/definitions/ValidationErrors"
    example:
      validation: []
  ValidationErrors:
    type: "object"
    required:
    - "description"
    - "line"
    properties:
      line:
        type: "integer"
        description: "The line number where the issue occurs. 0-indexed. If for some\
          \ reason, the broken rule does not include a line number, default to zero.\n"
        minimum: 0
      description:
        type: "string"
        description: "The issue's description, human friendly. Pertaining to how the\
          \ user can fix it."
      severity:
        type: "string"
        enum:
        - "CRITICAL"
        - "WARNING"
  ApiValidationUpdate:
    type: "object"
    properties:
      hasValidationErrors:
        type: "boolean"
      validationErrorsSeverity:
        type: "array"
        items:
          type: "string"
          enum:
          - "CRITICAL"
          - "WARNING"
    description: "Contains information required to update an APIs validation status"
  IntegrationPluginConfiguration:
    type: "object"
    required:
    - "configType"
    discriminator: "configType"
    properties:
      configType:
        type: "string"
    description: "Can be used as the parent superclass for any plugin integrations\
      \ which are available for usage as part of SwaggerHub."
    example:
      configType: "configType"
  SCMIntegrationPluginConfiguration:
    allOf:
    - $ref: "#/definitions/IntegrationPluginConfiguration"
    - type: "object"
      properties:
        name:
          type: "string"
        token:
          type: "string"
        branch:
          type: "string"
        owner:
          type: "string"
        repository:
          type: "string"
        outputFile:
          type: "string"
        target:
          type: "string"
        syncMethod:
          type: "string"
        enabled:
          type: "boolean"
        outputFolder:
          type: "string"
        providedPaths:
          type: "array"
          items:
            type: "string"
        ignoredPaths:
          type: "array"
          items:
            type: "string"
        managedPaths:
          type: "array"
          items:
            type: "string"
        username:
          type: "string"
        password:
          type: "string"
        project:
          type: "string"
        projectCollection:
          type: "string"
        personalAccessToken:
          type: "string"
        account:
          type: "string"
        url:
          type: "string"
        host:
          type: "string"
    description: "Configuration details required to create an SCM configuration. additionalProperties\
      \ is being used to allow for flexibiliy when adding fields to a SCM integration."
  IntegrationConfiguration:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "string"
        description: "ID of the integration"
        readOnly: true
      name:
        type: "string"
        description: "The display name of the integration. Must be unique among all\
          \ integrations configured for the given API version."
      enabled:
        type: "boolean"
        description: "Whether the integration is enabled or disabled."
        default: true
    description: "Common configuration details required to create an integration using\
      \ the `POST /apis/{owner}/{api}/{version}/integrations` endpoint"
  AutoMockingIntegration:
    allOf:
    - $ref: "#/definitions/IntegrationConfiguration"
    - type: "object"
      required:
      - "configType"
      properties:
        configType:
          type: "string"
          description: "Integration type."
          enum:
          - "API_AUTO_MOCKING"
        defaultResponseType:
          type: "string"
          description: "Response content type that the mock server will return if\
            \ no `Accept` header is specified."
          default: "application/json"
          enum:
          - "application/json"
          - "application/xml"
          - "application/yaml"
        token:
          type: "string"
          format: "password"
          description: "Bearer token that users will need to send in requests to the\
            \ mock server (private APIs only)."
        modify:
          type: "boolean"
          description: "Whether to update the `host`/`servers` in the API definition\
            \ to point to the mock server."
          default: true
    description: "Configuration details used to create an API Auto Mocking integration."
  WebhookIntegration:
    allOf:
    - $ref: "#/definitions/IntegrationConfiguration"
    - type: "object"
      required:
      - "configType"
      - "contentType"
      - "url"
      properties:
        configType:
          type: "string"
          description: "Integration type."
          enum:
          - "WEBHOOK"
        url:
          type: "string"
          description: "URL to send notification."
        contentType:
          type: "string"
          description: "Content type of notification."
          enum:
          - "application/json"
          - "application/x-www-form-urlencoded"
        lifecycleEvents:
          type: "array"
          description: "Lifecycle events that will trigger webhook."
          items:
            type: "string"
            enum:
            - "API_SAVED"
            - "API_PUBLISHED"
        additionalHeaders:
          type: "array"
          description: "Custom HTTP headers to be sent with webhook notifications.\
            \ Use the format \"name: value\" for each header."
          items:
            type: "string"
    description: "Configuration details used to create a Webhook integration."
  SCMIntegrationConfiguration:
    allOf:
    - $ref: "#/definitions/IntegrationConfiguration"
    - type: "object"
      properties:
        branch:
          type: "string"
          description: "The branch to synchronize to. If it does not exist in the\
            \ repository, it will be created based on the default branch. Branch must\
            \ not contain whitespace characters.\n"
        repository:
          type: "string"
          description: "The repository to synchronize with."
        target:
          type: "string"
          description: "The type of code to generate and push to the repository. For\
            \ the possible values, start creating an SCM integration manually and\
            \ check the \"Generated API Code\" values. Note that the available codegens\
            \ for OAS2 and OAS3 vary.\n"
        syncMethod:
          type: "string"
          description: "\"Basic Sync\" or \"Advanced Sync\". Basic Sync will manage\
            \ all files and folders in the branch. Advanced Sync allows you to define\
            \ which files and folders will be managed by SwaggerHub.\n"
        outputFolder:
          type: "string"
          description: "The output folder for the generated code or definition. This\
            \ location is relative to the repository root. If this folder does not\
            \ exist, it will be created.\n"
        outputFile:
          type: "string"
          description: "If target is the YAML/JSON, this is the file name for the\
            \ generated definition."
        providedPaths:
          type: "array"
          description: "Partially Managed Paths Files in these locations will be created\
            \ only if they do not exist. Existing files will not be modified.\n"
          items:
            type: "string"
        ignoredPaths:
          type: "array"
          description: "Ignored Paths Paths to ignore from code generation, relative\
            \ to the Output Folder\n"
          items:
            type: "string"
        managedPaths:
          type: "array"
          description: "Fully Managed Paths Files in these locations will be fully\
            \ managed by SwaggerHub relative to the Output Folder. All files will\
            \ be overwritten and existing files may be deleted if not needed.\n"
          items:
            type: "string"
    description: "Common configuration details used to create source control integrations."
  AzureDevopsServerIntegration:
    allOf:
    - $ref: "#/definitions/SCMIntegrationConfiguration"
    - type: "object"
      properties:
        configType:
          type: "string"
          description: "Integration type to create."
          enum:
          - "AZURE_DEVOPS_SERVER"
        url:
          type: "string"
          description: "The Azure Devops Server host with which to connect."
        personalAccessToken:
          type: "string"
          format: "password"
          description: "A personal access token for accessing the target repository.\
            \ The token must have the _Code (read and write)_ scope.\n"
        projectCollection:
          type: "string"
          description: "Project collection which contains the target repository's\
            \ project."
        project:
          type: "string"
          description: "Team Project which contains the target repository."
    description: "Configuration details used to create an Azure DevOps Server integration."
  AzureDevopsServicesIntegration:
    allOf:
    - $ref: "#/definitions/SCMIntegrationConfiguration"
    - type: "object"
      properties:
        configType:
          type: "string"
          description: "Integration type to create."
          enum:
          - "AZURE_DEVOPS_SERVICES"
        organization:
          type: "string"
          description: "The Azure DevOps organization that contains the target repository."
        personalAccessToken:
          type: "string"
          format: "password"
          description: "A personal access token for accessing the target repository.\
            \ Be sure to include read-write access to your repositories.\n"
        project:
          type: "string"
          description: "Team Project which contains the target repository."
    description: "Configuration details used to create an Azure DevOps Services integration."
  BitbucketCloudIntegration:
    allOf:
    - $ref: "#/definitions/SCMIntegrationConfiguration"
    - type: "object"
      properties:
        configType:
          type: "string"
          description: "Integration type to create."
          enum:
          - "BITBUCKET_CLOUD"
        username:
          type: "string"
          description: "Bitbucket username to authenticate with."
        password:
          type: "string"
          format: "password"
          description: "Bitbucket app password. The required permissions are: Account:\
            \ Email, Read Repositories: Read, Write\n"
        owner:
          type: "string"
          description: "The owner of the repository to synchronize with."
    description: "Configuration details used to create a Bitbucket Cloud integration."
  BitbucketServerIntegration:
    allOf:
    - $ref: "#/definitions/SCMIntegrationConfiguration"
    - type: "object"
      properties:
        configType:
          type: "string"
          description: "Integration type to create."
          enum:
          - "BITBUCKET_SERVER"
        host:
          type: "string"
          description: "The Bitbucket Server host to connect to."
        username:
          type: "string"
          description: "Bitbucket username to authenticate with."
        password:
          type: "string"
          format: "password"
          description: "Password of account"
        owner:
          type: "string"
          description: "The owner of the repository to synchronize with."
    description: "Configuration details used to create a Bitbucket Server integration."
  GitHubIntegration:
    allOf:
    - $ref: "#/definitions/SCMIntegrationConfiguration"
    - type: "object"
      properties:
        configType:
          type: "string"
          description: "Integration type to create."
          enum:
          - "GITHUB"
        token:
          type: "string"
          format: "password"
          description: "A personal access token for accessing the target repository.\
            \ You can generate tokens here: https://github.com/settings/tokens. Be\
            \ sure to include read-write access to your repositories.\n"
        owner:
          type: "string"
          description: "The owner of the repository to synchronize with."
    description: "Configuration details used to create a GitHub integration."
  GitHubEnterpriseIntegration:
    allOf:
    - $ref: "#/definitions/SCMIntegrationConfiguration"
    - type: "object"
      properties:
        configType:
          type: "string"
          description: "Integration type to create"
          enum:
          - "GITHUB_ENTERPRISE"
        host:
          type: "string"
          description: "The GitHub Enterprise host to connect to"
        token:
          type: "string"
          format: "password"
          description: "A personal access token for accessing the target repository.\
            \ Be sure to include read-write access to your repositories.\n"
        owner:
          type: "string"
          description: "The owner of the repository to synchronize with."
    description: "Configuration details used to create a GitHub Enterprise integration."
  GitLabIntegration:
    allOf:
    - $ref: "#/definitions/SCMIntegrationConfiguration"
    - type: "object"
      properties:
        configType:
          type: "string"
          description: "Integration type to create."
          enum:
          - "GITLAB"
        host:
          type: "string"
          description: "The GitLab host to connect to."
          default: "https://gitlab.com"
        personalAccessToken:
          type: "string"
          format: "password"
          description: "A personal access token for accessing the target repository.\
            \ Be sure to include read-write access to your repositories.\n"
        owner:
          type: "string"
          description: "The owner of the repository to synchronize with."
    description: "Configuration details used to create a GitLab integration"
  UserAsset:
    type: "object"
    required:
    - "link"
    - "name"
    - "product"
    - "timestamp"
    - "type"
    properties:
      name:
        type: "string"
        example: "Version 1.2.0 of the accounts-api"
        description: "a user-friendly name of this asset"
      type:
        type: "string"
        example: "swaggerhub/api"
        description: "a type identifier for this asset in the format product/type"
      link:
        type: "string"
        example: "https://app.swaggerhub.com/apis/smartbear/accounts-api/1.2.0"
        description: "a deep link that will open the corresponding asset in its product"
      uri:
        type: "string"
        description: "a uri that can be used by the target of a cross-product action\
          \ to retrieve the asset with a GET request"
      product:
        type: "string"
        example: "swaggerhub"
        description: "an identifier for the product this asset belongs to (for filtering,\
          \ etc)"
      timestamp:
        type: "string"
        format: "date-time"
        description: "when this asset was last updated"
    description: "a recent user asset from any supported product displayed on the\
      \ portal front page and in the gear menu together with a deep link back to the\
      \ product"
    example:
      product: "swaggerhub"
      name: "Version 1.2.0 of the accounts-api"
      link: "https://app.swaggerhub.com/apis/smartbear/accounts-api/1.2.0"
      type: "swaggerhub/api"
      uri: "uri"
      timestamp: "2000-01-23T04:56:07.000+00:00"
  RulesDefinition:
    properties:
      customRules:
        type: "string"
  MultiStatusResponseBody:
    type: "array"
    items:
      $ref: "#/definitions/MultiStatusResponse"
  MultiStatusResponse:
    type: "object"
    properties:
      action:
        type: "string"
        enum:
        - "SAVE_SPEC"
        - "ADD_SPEC_TO_PROJECT"
      status:
        type: "integer"
  PluginConfigurationUpdateOptions:
    type: "object"
    properties:
      disable:
        type: "string"
        description: "Available options\nPLAN = disable plugins based on the current\
          \ owner's plan. See plan details for more info on specific plugins allowed\
          \ per plan\n"
        enum:
        - "PLAN"
    example:
      disable: "PLAN"
  CopyConfigurationDetails:
    type: "object"
    properties:
      version:
        type: "string"
        example: "1.0.1"
        description: "The version of the API to copy the configurations to."
      integrationIds:
        type: "array"
        items:
          type: "string"
    example:
      integrationIds:
      - "integrationIds"
      - "integrationIds"
      version: "1.0.1"
  DefaultVersion:
    type: "object"
    required:
    - "version"
    properties:
      version:
        type: "string"
    example:
      version: "version"
  NewVersion:
    type: "object"
    required:
    - "version"
    properties:
      version:
        type: "string"
        example: "1.0.1"
        description: "The name of the new version."
      private:
        type: "boolean"
        example: false
        description: "Whether the new version should be public or private."
  inline_response_200:
    type: "object"
    properties:
      lastPushTime:
        type: "string"
        format: "datetime"
    example:
      lastPushTime: "lastPushTime"
parameters:
  filterViewers:
    name: "filterViewers"
    in: "query"
    description: "Role as a criteria for filter list of notifiable users."
    required: false
    type: "boolean"
    x-exportParamName: "FilterViewers"
    x-optionalDataType: "Bool"
  notify:
    name: "notify"
    in: "query"
    description: "Notification status (Enabled/Disabled) for API."
    required: false
    type: "boolean"
  scope:
    name: "scope"
    in: "query"
    description: "Identifies requester"
    required: true
    type: "string"
    default: "USER"
    enum:
    - "USER"
    - "ALL"
    x-exportParamName: "Scope"
  specVersion:
    name: "version"
    in: "query"
    description: "version of the spec"
    required: false
    type: "string"
    x-exportParamName: "Version"
    x-optionalDataType: "String"
  owner:
    name: "owner"
    in: "path"
    description: "API or Domain owner identifier (case-sensitive)"
    required: true
    type: "string"
    x-exportParamName: "Owner"
  projectOwner:
    name: "owner"
    in: "path"
    description: "Organization name (case-sensitive)"
    required: true
    type: "string"
    x-exportParamName: "Owner"
  version:
    name: "version"
    in: "path"
    description: "version identifier"
    required: true
    type: "string"
    x-exportParamName: "Version"
  integrationId:
    name: "integrationId"
    in: "path"
    description: "integration identifier"
    required: true
    type: "string"
    x-exportParamName: "IntegrationId"
  filter:
    name: "filter"
    in: "query"
    description: "filter to apply, 'user' filters by current user"
    required: false
    type: "string"
    enum:
    - "user"
    x-inflector-hidden: true
    x-exportParamName: "Filter"
    x-optionalDataType: "String"
  state:
    name: "state"
    in: "query"
    description: "matches against published state of the spec\n* UNPUBLISHED - spec\
      \ is a draft, a work in progress\n* PUBLISHED - spec is a stable version ready\
      \ for consuming from client applications\n* ANY - either PUBLISHED or UNPUBLISHED\n"
    required: false
    type: "string"
    default: "ALL"
    enum:
    - "ALL"
    - "PUBLISHED"
    - "UNPUBLISHED"
    x-exportParamName: "State"
    x-optionalDataType: "String"
  api:
    name: "api"
    in: "path"
    description: "API identifier"
    required: true
    type: "string"
    x-exportParamName: "Api"
  domain:
    name: "domain"
    in: "path"
    description: "domain identifier"
    required: true
    type: "string"
    x-exportParamName: "Domain"
  newName:
    name: "newName"
    in: "query"
    description: "New name"
    required: true
    type: "string"
    maxLength: 60
    minLength: 3
    x-exportParamName: "NewName"
  newOwner:
    name: "newOwner"
    in: "query"
    description: "New owner"
    required: true
    type: "string"
    x-exportParamName: "NewOwner"
  page:
    name: "page"
    in: "query"
    description: "page to return"
    required: false
    type: "integer"
    default: 0
    format: "int32"
    x-exportParamName: "Page"
    x-optionalDataType: "Int32"
  limit:
    name: "limit"
    in: "query"
    description: "number of results per page (1 .. 100)"
    required: false
    type: "integer"
    default: 10
    format: "int32"
    x-exportParamName: "Limit"
    x-optionalDataType: "Int32"
  sort:
    name: "sort"
    in: "query"
    description: "sort criteria or result set\n* NAME -\n* UPATED\n* CREATED\n* OWNER\n\
      * BEST_MATCH\n* TITLE\n"
    required: false
    type: "string"
    default: "NAME"
    enum:
    - "NAME"
    - "UPDATED"
    - "CREATED"
    - "OWNER"
    - "BEST_MATCH"
    - "TITLE"
    x-exportParamName: "Sort"
    x-optionalDataType: "String"
  projectSort:
    name: "sort"
    in: "query"
    description: "sort criteria or result set\n* NAME\n* OWNER\n"
    required: false
    type: "string"
    default: "NAME"
    enum:
    - "NAME"
    - "OWNER"
    x-exportParamName: "Sort"
    x-optionalDataType: "String"
  order:
    name: "order"
    in: "query"
    description: "sort order"
    required: false
    type: "string"
    default: "ASC"
    enum:
    - "ASC"
    - "DESC"
    x-exportParamName: "Order"
    x-optionalDataType: "String"
  apiDefinition:
    in: "body"
    name: "definition"
    description: "the Swagger definition of this API"
    required: true
    schema:
      type: "string"
    x-exportParamName: "Definition"
  draftSpec:
    in: "body"
    name: "entity"
    description: "the Swagger definition of this API and comments in draft state"
    required: true
    schema:
      $ref: "#/definitions/DraftModel"
    x-exportParamName: "Entity"
  domainDefinition:
    in: "body"
    name: "definition"
    description: "the Swagger definition of this Domain"
    required: false
    schema:
      type: "string"
    x-exportParamName: "Definition"
    x-optionalDataType: "String"
  generatorType:
    name: "generatorType"
    in: "path"
    description: "type of generator"
    required: true
    type: "string"
    enum:
    - "server"
    - "client"
    - "documentation"
    - "other"
    x-exportParamName: "GeneratorType"
  isPrivate:
    name: "isPrivate"
    in: "query"
    description: "Defines whether the API has to be private"
    required: false
    type: "boolean"
    default: false
    x-exportParamName: "IsPrivate"
    x-optionalDataType: "Bool"
  pluginConfiguration:
    in: "body"
    name: "pluginConfiguration"
    description: "the Plugin configuration to be added or updated"
    required: true
    schema:
      $ref: "#/definitions/PluginConfiguration"
    x-exportParamName: "PluginConfiguration"
  pluginDefinition:
    in: "body"
    name: "pluginDefinition"
    description: "the Plugin definition to be registered or disabled"
    required: true
    schema:
      $ref: "#/definitions/PluginDefinition"
    x-exportParamName: "PluginDefinition"
  systemPluginConfiguration:
    in: "body"
    name: "systemPluginConfiguration"
    description: "the System Plugin configuration to be added or updated"
    required: true
    schema:
      $ref: "#/definitions/SystemPluginConfiguration"
    x-exportParamName: "SystemPluginConfiguration"
  force:
    name: "force"
    in: "query"
    description: "force update"
    required: false
    type: "boolean"
    x-exportParamName: "Force"
    x-optionalDataType: "Bool"
  comment:
    name: "comment"
    in: "path"
    description: "comment identifier"
    required: true
    type: "string"
    x-exportParamName: "Comment"
  commentStatus:
    name: "status"
    in: "path"
    description: "comment status"
    required: true
    type: "string"
    enum:
    - "OPEN"
    - "RESOLVED"
    x-exportParamName: "Status"
  reply:
    name: "reply"
    in: "path"
    description: "reply identifier"
    required: true
    type: "string"
    x-exportParamName: "Reply"
  template:
    name: "template"
    in: "query"
    description: "Template id"
    required: true
    type: "string"
    x-exportParamName: "Template"
  method:
    name: "method"
    in: "query"
    description: "The method to use for comparing two APIs.\n* FULL - Full line-by-line\
      \ text comparison of the two APIs\n* LOGICAL - Compares if the two API's are\
      \ logically equivalent. Ignores non-structural fields like descriptions, examples\
      \ etc. Also ignores order when not important.\n* STRUCTURAL - Like LOGICAL but\
      \ also compares non-structural fields\n"
    required: true
    type: "string"
    enum:
    - "FULL"
    - "LOGICAL"
    - "STRUCTURAL"
    x-exportParamName: "Method"
  specType:
    name: "specType"
    in: "query"
    description: "Type of Swagger specs to search\n* API - APIs only\n* DOMAIN - Domains\
      \ only\n* ANY - Both APIs and Domains\n"
    required: false
    type: "string"
    default: "ANY"
    enum:
    - "API"
    - "DOMAIN"
    - "ANY"
    x-exportParamName: "SpecType"
    x-optionalDataType: "String"
  visibility:
    name: "visibility"
    in: "query"
    description: "The visibility of a spec in SwaggerHub\n* PUBLIC - can be viewed\
      \ by anyone\n* PRIVATE - can only be viewed by you or your Org and those that\
      \ you are collaborating with or have shared it with\n* ANY - either PUBLIC or\
      \ PRIVATE\n"
    required: false
    type: "string"
    default: "ANY"
    enum:
    - "PUBLIC"
    - "PRIVATE"
    - "ANY"
    x-exportParamName: "Visibility"
    x-optionalDataType: "String"
  projectMemberList:
    in: "body"
    name: "projectMemberList"
    description: "the list of project member names"
    required: true
    schema:
      $ref: "#/definitions/ProjectMemberList"
    x-exportParamName: "ProjectMemberList"
  projectRequest:
    in: "body"
    name: "projectRequest"
    description: "The project to create or update. Properties that are not provided\
      \ are set to empty values.\n"
    required: true
    schema:
      $ref: "#/definitions/Project"
    x-exportParamName: "ProjectRequest"
  query:
    name: "query"
    in: "query"
    description: "query string"
    required: false
    type: "string"
    x-exportParamName: "Query"
    x-optionalDataType: "String"
  oas:
    name: "oas"
    in: "query"
    description: "The OpenApi Specification (oas) version.\n* 2.0 - Formally known\
      \ as 'swagger'\n* 3.0.x - The latest supported OpenApi Specification version\
      \ by SwaggerHub.\nFor search queries all 3.0.x versions are grouped together\n"
    required: false
    type: "string"
    enum:
    - "2.0"
    - "3.0.0"
    - "3.0.1"
    - "3.0.2"
    - "3.0.3"
    x-exportParamName: "Oas"
    x-optionalDataType: "String"
  standardization:
    name: "standardization"
    in: "query"
    description: "If the Spec has any style validation errors.\n"
    required: false
    type: "string"
    enum:
    - "FAILED"
    - "CRITICAL"
    - "WARNING"
    x-exportParamName: "Standardization"
    x-optionalDataType: "String"
  projectName:
    name: "projectName"
    in: "query"
    description: "The project to add the API or Domain to.\n"
    required: false
    type: "string"
    x-exportParamName: "ProjectName"
    x-optionalDataType: "String"
  pretty:
    name: "pretty"
    in: "query"
    description: "Pretty format the JSON"
    required: false
    type: "boolean"
    default: false
    x-exportParamName: "Pretty"
    x-optionalDataType: "Bool"
  resolved:
    name: "resolved"
    in: "query"
    description: "If true, return resolved version of Swagger definition."
    required: false
    type: "boolean"
    default: false
    x-exportParamName: "Resolved"
    x-optionalDataType: "Bool"
  flatten:
    name: "flatten"
    in: "query"
    description: "If true, creates models from inline schemas in Swagger definition."
    required: false
    type: "boolean"
    default: false
    x-exportParamName: "Flatten"
    x-optionalDataType: "Bool"
  projectId:
    name: "projectId"
    in: "path"
    description: "The name of a project(case-sensitive)"
    required: true
    type: "string"
    x-exportParamName: "ProjectId"
  commitMessage:
    name: "commitMessage"
    in: "query"
    description: "Message to create commit with. A default will be provided if no\
      \ message is provided."
    required: false
    type: "string"
    x-exportParamName: "CommitMessage"
    x-optionalDataType: "String"
  typeOfSpec:
    name: "typeOfSpec"
    in: "path"
    description: "Type of Swagger spec\n* API\n* DOMAIN\n* ALL\n"
    required: true
    type: "string"
    enum:
    - "API"
    - "DOMAIN"
    - "ALL"
    x-exportParamName: "TypeOfSpec"
  eventType:
    name: "eventType"
    in: "path"
    description: "lifecycle event type"
    required: true
    type: "string"
    enum:
    - "CREATE"
    - "UPDATE"
    - "DELETE"
    x-exportParamName: "EventType"
responses:
  BadRequest:
    description: "the request body was invalid"
  Unauthorized:
    description: "access token is not set or invalid"
  ApiNotFound:
    description: "specified api not found"
  DomainNotFound:
    description: "specified domain not found"
  ApiCommentNotFound:
    description: "specified api or comment not found"
  DomainCommentNotFound:
    description: "specified domain or comment not found"
  ApiCommentReplyNotFound:
    description: "specified api or comment or reply not found"
  DomainCommentReplyNotFound:
    description: "specified domain or comment or reply not found"
  CommentForbidden:
    description: "The comment feature is not available for the organization's plan,\
      \ or the authenticating user does not have permission to complete this action."

/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Events
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object EventsApi {

  /**
   * 
   * Expected answers:
   *   code 200 :  (Event Item Retrieved)
   *   code 400 :  (Invalid Request - unable to interpret request)
   *   code 401 :  (Authentication required to access data)
   *   code 403 :  (Access denied to protected data)
   *   code 404 :  (No events found - invalid event_id)
   * 
   * @param eventID eventID
   */
  def acknowledgeEvent(eventID: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://localhost", "/events/{eventID}", "application/json")
      .withPathParam("eventID", eventID)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[Unit](404)
        /**
   * 
   * Expected answers:
   *   code 201 :  (Event raised)
   *   code 400 :  (Invalid Request - unable to interpret request)
   *   code 401 :  (Authentication required to add an event)
   *   code 403 :  (Access denied - not authorized to add an event)
   *   code 409 :  (Body of the request contains conflicting, malformed, or invalid data)
   * 
   * @param body Request Body
   */
  def createEvent(body: Events): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost", "/events", "application/json")
      .withBody(body)
      .withSuccessResponse[Unit](201)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[Unit](409)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Successful)
   *   code 400 :  (Invalid Request - unable to interpret request)
   * 
   * @param eventID eventID
   */
  def eventOptions(eventID: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.OPTIONS, "https://localhost", "/events/{eventID}", "application/json")
      .withPathParam("eventID", eventID)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Successful)
   *   code 400 :  (Invalid Request - unable to interpret request)
   */
  def eventsOptions(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.OPTIONS, "https://localhost", "/events", "application/json")
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Collection Retrieved)
   *   code 400 :  (Invalid Request - unable to interpret request)
   *   code 401 :  (Authentication required to access data)
   *   code 403 :  (Access denied to protected data)
   *   code 404 :  (No Cars satisfy the query parameters - the collection is empty)
   *   code 409 :  (Query parameters conflict or are malformed)
   * 
   * @param count Defines how many events to return. Defaults to 1.
   */
  def getEvents(count: Option[Int]): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost", "/events", "application/json")
      .withQueryParam("count", count)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](409)
      

}

